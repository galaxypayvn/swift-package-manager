// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name GalaxyPaySDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import Contacts
import CoreData
import CoreGraphics
import CoreImage
import Dispatch
import EventKit
import Foundation
@_exported import GalaxyPaySDK
import LocalAuthentication
import MachO
import MobileCoreServices
import Photos
import QuartzCore
import SafariServices
import Security
import Swift
import SystemConfiguration
import UIKit.UIColor
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: GalaxyPaySDK.Redirector
  public static let doNotFollow: GalaxyPaySDK.Redirector
  public let behavior: GalaxyPaySDK.Redirector.Behavior
  public init(behavior: GalaxyPaySDK.Redirector.Behavior)
}
extension GalaxyPaySDK.Redirector : GalaxyPaySDK.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public class ClearMessage : GalaxyPaySDK.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  convenience public init(string: Swift.String, using encoding: Swift.String.Encoding) throws
  public func string(encoding: Swift.String.Encoding) throws -> Swift.String
  public func encrypted(with key: GalaxyPaySDK.PublicKey, padding: GalaxyPaySDK.Padding) throws -> GalaxyPaySDK.EncryptedMessage
  public func signed(with key: GalaxyPaySDK.PrivateKey, digestType: GalaxyPaySDK.Signature.DigestType) throws -> GalaxyPaySDK.Signature
  public func verify(with key: GalaxyPaySDK.PublicKey, signature: GalaxyPaySDK.Signature, digestType: GalaxyPaySDK.Signature.DigestType) throws -> Swift.Bool
  @objc deinit
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: GalaxyPaySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: GalaxyPaySDK.Request, didFailToCreateURLRequestWithError error: GalaxyPaySDK.AFError)
  func request(_ request: GalaxyPaySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: GalaxyPaySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: GalaxyPaySDK.AFError)
  func request(_ request: GalaxyPaySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: GalaxyPaySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: GalaxyPaySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: GalaxyPaySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: GalaxyPaySDK.AFError)
  func request(_ request: GalaxyPaySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: GalaxyPaySDK.AFError?)
  func requestIsRetrying(_ request: GalaxyPaySDK.Request)
  func requestDidFinish(_ request: GalaxyPaySDK.Request)
  func requestDidResume(_ request: GalaxyPaySDK.Request)
  func request(_ request: GalaxyPaySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: GalaxyPaySDK.Request)
  func request(_ request: GalaxyPaySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: GalaxyPaySDK.Request)
  func request(_ request: GalaxyPaySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: GalaxyPaySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  func request(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Foundation.Data?, GalaxyPaySDK.AFError>)
  func request<Value>(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Value, GalaxyPaySDK.AFError>)
  func request(_ request: GalaxyPaySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: GalaxyPaySDK.Request.ValidationResult)
  func request<Value>(_ request: GalaxyPaySDK.DataStreamRequest, didParseStream result: Swift.Result<Value, GalaxyPaySDK.AFError>)
  func request(_ request: GalaxyPaySDK.UploadRequest, didCreateUploadable uploadable: GalaxyPaySDK.UploadRequest.Uploadable)
  func request(_ request: GalaxyPaySDK.UploadRequest, didFailToCreateUploadableWithError error: GalaxyPaySDK.AFError)
  func request(_ request: GalaxyPaySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: GalaxyPaySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, GalaxyPaySDK.AFError>)
  func request(_ request: GalaxyPaySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: GalaxyPaySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  func request(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Foundation.URL?, GalaxyPaySDK.AFError>)
  func request<Value>(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Value, GalaxyPaySDK.AFError>)
}
extension GalaxyPaySDK.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: GalaxyPaySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: GalaxyPaySDK.Request, didFailToCreateURLRequestWithError error: GalaxyPaySDK.AFError)
  public func request(_ request: GalaxyPaySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: GalaxyPaySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: GalaxyPaySDK.AFError)
  public func request(_ request: GalaxyPaySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: GalaxyPaySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: GalaxyPaySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: GalaxyPaySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: GalaxyPaySDK.AFError)
  public func request(_ request: GalaxyPaySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: GalaxyPaySDK.AFError?)
  public func requestIsRetrying(_ request: GalaxyPaySDK.Request)
  public func requestDidFinish(_ request: GalaxyPaySDK.Request)
  public func requestDidResume(_ request: GalaxyPaySDK.Request)
  public func request(_ request: GalaxyPaySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: GalaxyPaySDK.Request)
  public func request(_ request: GalaxyPaySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: GalaxyPaySDK.Request)
  public func request(_ request: GalaxyPaySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: GalaxyPaySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  public func request(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Foundation.Data?, GalaxyPaySDK.AFError>)
  public func request<Value>(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Value, GalaxyPaySDK.AFError>)
  public func request(_ request: GalaxyPaySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: GalaxyPaySDK.Request.ValidationResult)
  public func request<Value>(_ request: GalaxyPaySDK.DataStreamRequest, didParseStream result: Swift.Result<Value, GalaxyPaySDK.AFError>)
  public func request(_ request: GalaxyPaySDK.UploadRequest, didCreateUploadable uploadable: GalaxyPaySDK.UploadRequest.Uploadable)
  public func request(_ request: GalaxyPaySDK.UploadRequest, didFailToCreateUploadableWithError error: GalaxyPaySDK.AFError)
  public func request(_ request: GalaxyPaySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: GalaxyPaySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, GalaxyPaySDK.AFError>)
  public func request(_ request: GalaxyPaySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: GalaxyPaySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  public func request(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Foundation.URL?, GalaxyPaySDK.AFError>)
  public func request<Value>(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Value, GalaxyPaySDK.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : GalaxyPaySDK.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: GalaxyPaySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: GalaxyPaySDK.Request, didFailToCreateURLRequestWithError error: GalaxyPaySDK.AFError)
  final public func request(_ request: GalaxyPaySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: GalaxyPaySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: GalaxyPaySDK.AFError)
  final public func request(_ request: GalaxyPaySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: GalaxyPaySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: GalaxyPaySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: GalaxyPaySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: GalaxyPaySDK.AFError)
  final public func request(_ request: GalaxyPaySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: GalaxyPaySDK.AFError?)
  final public func requestIsRetrying(_ request: GalaxyPaySDK.Request)
  final public func requestDidFinish(_ request: GalaxyPaySDK.Request)
  final public func requestDidResume(_ request: GalaxyPaySDK.Request)
  final public func request(_ request: GalaxyPaySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: GalaxyPaySDK.Request)
  final public func request(_ request: GalaxyPaySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: GalaxyPaySDK.Request)
  final public func request(_ request: GalaxyPaySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: GalaxyPaySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  final public func request(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Foundation.Data?, GalaxyPaySDK.AFError>)
  final public func request<Value>(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Value, GalaxyPaySDK.AFError>)
  final public func request(_ request: GalaxyPaySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: GalaxyPaySDK.Request.ValidationResult)
  final public func request<Value>(_ request: GalaxyPaySDK.DataStreamRequest, didParseStream result: Swift.Result<Value, GalaxyPaySDK.AFError>)
  final public func request(_ request: GalaxyPaySDK.UploadRequest, didCreateUploadable uploadable: GalaxyPaySDK.UploadRequest.Uploadable)
  final public func request(_ request: GalaxyPaySDK.UploadRequest, didFailToCreateUploadableWithError error: GalaxyPaySDK.AFError)
  final public func request(_ request: GalaxyPaySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: GalaxyPaySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, GalaxyPaySDK.AFError>)
  final public func request(_ request: GalaxyPaySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: GalaxyPaySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  final public func request(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Foundation.URL?, GalaxyPaySDK.AFError>)
  final public func request<Value>(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Value, GalaxyPaySDK.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : GalaxyPaySDK.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((GalaxyPaySDK.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((GalaxyPaySDK.Request, GalaxyPaySDK.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((GalaxyPaySDK.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((GalaxyPaySDK.Request, Foundation.URLRequest, GalaxyPaySDK.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((GalaxyPaySDK.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((GalaxyPaySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((GalaxyPaySDK.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((GalaxyPaySDK.Request, Foundation.URLSessionTask, GalaxyPaySDK.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((GalaxyPaySDK.Request, Foundation.URLSessionTask, GalaxyPaySDK.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((GalaxyPaySDK.Request) -> Swift.Void)?
  open var requestDidFinish: ((GalaxyPaySDK.Request) -> Swift.Void)?
  open var requestDidResume: ((GalaxyPaySDK.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((GalaxyPaySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((GalaxyPaySDK.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((GalaxyPaySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((GalaxyPaySDK.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((GalaxyPaySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((GalaxyPaySDK.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, GalaxyPaySDK.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((GalaxyPaySDK.DataRequest, GalaxyPaySDK.DataResponse<Foundation.Data?, GalaxyPaySDK.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((GalaxyPaySDK.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, GalaxyPaySDK.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((GalaxyPaySDK.UploadRequest, GalaxyPaySDK.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((GalaxyPaySDK.UploadRequest, GalaxyPaySDK.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((GalaxyPaySDK.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((GalaxyPaySDK.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, GalaxyPaySDK.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((GalaxyPaySDK.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((GalaxyPaySDK.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, GalaxyPaySDK.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((GalaxyPaySDK.DownloadRequest, GalaxyPaySDK.DownloadResponse<Foundation.URL?, GalaxyPaySDK.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: GalaxyPaySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: GalaxyPaySDK.Request, didFailToCreateURLRequestWithError error: GalaxyPaySDK.AFError)
  open func request(_ request: GalaxyPaySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: GalaxyPaySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: GalaxyPaySDK.AFError)
  open func request(_ request: GalaxyPaySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: GalaxyPaySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: GalaxyPaySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: GalaxyPaySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: GalaxyPaySDK.AFError)
  open func request(_ request: GalaxyPaySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: GalaxyPaySDK.AFError?)
  open func requestIsRetrying(_ request: GalaxyPaySDK.Request)
  open func requestDidFinish(_ request: GalaxyPaySDK.Request)
  open func requestDidResume(_ request: GalaxyPaySDK.Request)
  public func request(_ request: GalaxyPaySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: GalaxyPaySDK.Request)
  public func request(_ request: GalaxyPaySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: GalaxyPaySDK.Request)
  public func request(_ request: GalaxyPaySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: GalaxyPaySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  open func request(_ request: GalaxyPaySDK.DataRequest, didParseResponse response: GalaxyPaySDK.DataResponse<Foundation.Data?, GalaxyPaySDK.AFError>)
  public func request(_ request: GalaxyPaySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: GalaxyPaySDK.Request.ValidationResult)
  open func request(_ request: GalaxyPaySDK.UploadRequest, didCreateUploadable uploadable: GalaxyPaySDK.UploadRequest.Uploadable)
  open func request(_ request: GalaxyPaySDK.UploadRequest, didFailToCreateUploadableWithError error: GalaxyPaySDK.AFError)
  open func request(_ request: GalaxyPaySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: GalaxyPaySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, GalaxyPaySDK.AFError>)
  open func request(_ request: GalaxyPaySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: GalaxyPaySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: GalaxyPaySDK.Request.ValidationResult)
  open func request(_ request: GalaxyPaySDK.DownloadRequest, didParseResponse response: GalaxyPaySDK.DownloadResponse<Foundation.URL?, GalaxyPaySDK.AFError>)
  @objc deinit
}
public enum ResponseTransactionError {
  public typealias Response = GalaxyPaySDK.ResponseTransactionError.APIResponse<GalaxyPaySDK.ResponseTransactionError.Data>
  public struct APIResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Data : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQAutoToolbarManageBehaviour : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
  case x509CertificateFailed
}
extension GalaxyPaySDK.SwiftyRSAError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardManager {
  @objc final public var enableDebugging: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc final public func registerAllNotifications()
  @objc final public func unregisterAllNotifications()
  public struct Static {
  }
}
open class Session {
  public static let `default`: GalaxyPaySDK.Session
  final public let session: Foundation.URLSession
  final public let delegate: GalaxyPaySDK.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: GalaxyPaySDK.RequestInterceptor?
  final public let serverTrustManager: GalaxyPaySDK.ServerTrustManager?
  final public let redirectHandler: GalaxyPaySDK.RedirectHandler?
  final public let cachedResponseHandler: GalaxyPaySDK.CachedResponseHandler?
  final public let eventMonitor: GalaxyPaySDK.CompositeEventMonitor
  final public let defaultEventMonitors: [GalaxyPaySDK.EventMonitor]
  public init(session: Foundation.URLSession, delegate: GalaxyPaySDK.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, serverTrustManager: GalaxyPaySDK.ServerTrustManager? = nil, redirectHandler: GalaxyPaySDK.RedirectHandler? = nil, cachedResponseHandler: GalaxyPaySDK.CachedResponseHandler? = nil, eventMonitors: [GalaxyPaySDK.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: GalaxyPaySDK.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, serverTrustManager: GalaxyPaySDK.ServerTrustManager? = nil, redirectHandler: GalaxyPaySDK.RedirectHandler? = nil, cachedResponseHandler: GalaxyPaySDK.CachedResponseHandler? = nil, eventMonitors: [GalaxyPaySDK.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<GalaxyPaySDK.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .get, parameters: GalaxyPaySDK.Parameters? = nil, encoding: GalaxyPaySDK.ParameterEncoding = URLEncoding.default, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.DataRequest
  open func request<Parameters>(_ convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .get, parameters: Parameters? = nil, encoder: GalaxyPaySDK.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: GalaxyPaySDK.URLRequestConvertible, interceptor: GalaxyPaySDK.RequestInterceptor? = nil) -> GalaxyPaySDK.DataRequest
  open func streamRequest<Parameters>(_ convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .get, parameters: Parameters? = nil, encoder: GalaxyPaySDK.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: GalaxyPaySDK.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .get, headers: GalaxyPaySDK.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.DataStreamRequest
  open func streamRequest(_ convertible: GalaxyPaySDK.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: GalaxyPaySDK.RequestInterceptor? = nil) -> GalaxyPaySDK.DataStreamRequest
  open func download(_ convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .get, parameters: GalaxyPaySDK.Parameters? = nil, encoding: GalaxyPaySDK.ParameterEncoding = URLEncoding.default, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil, to destination: GalaxyPaySDK.DownloadRequest.Destination? = nil) -> GalaxyPaySDK.DownloadRequest
  open func download<Parameters>(_ convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .get, parameters: Parameters? = nil, encoder: GalaxyPaySDK.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil, to destination: GalaxyPaySDK.DownloadRequest.Destination? = nil) -> GalaxyPaySDK.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: GalaxyPaySDK.URLRequestConvertible, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, to destination: GalaxyPaySDK.DownloadRequest.Destination? = nil) -> GalaxyPaySDK.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, to destination: GalaxyPaySDK.DownloadRequest.Destination? = nil) -> GalaxyPaySDK.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .post, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: GalaxyPaySDK.URLRequestConvertible, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> GalaxyPaySDK.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .post, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: GalaxyPaySDK.URLRequestConvertible, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> GalaxyPaySDK.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod = .post, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: GalaxyPaySDK.URLRequestConvertible, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> GalaxyPaySDK.UploadRequest
  open func upload(multipartFormData: @escaping (GalaxyPaySDK.MultipartFormData) -> Swift.Void, to url: GalaxyPaySDK.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: GalaxyPaySDK.HTTPMethod = .post, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.UploadRequest
  open func upload(multipartFormData: @escaping (GalaxyPaySDK.MultipartFormData) -> Swift.Void, with request: GalaxyPaySDK.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> GalaxyPaySDK.UploadRequest
  open func upload(multipartFormData: GalaxyPaySDK.MultipartFormData, to url: GalaxyPaySDK.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: GalaxyPaySDK.HTTPMethod = .post, headers: GalaxyPaySDK.HTTPHeaders? = nil, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: GalaxyPaySDK.Session.RequestModifier? = nil) -> GalaxyPaySDK.UploadRequest
  open func upload(multipartFormData: GalaxyPaySDK.MultipartFormData, with request: GalaxyPaySDK.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: GalaxyPaySDK.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> GalaxyPaySDK.UploadRequest
}
extension GalaxyPaySDK.Session : GalaxyPaySDK.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: GalaxyPaySDK.Request)
  public func retryResult(for request: GalaxyPaySDK.Request, dueTo error: GalaxyPaySDK.AFError, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: GalaxyPaySDK.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: GalaxyPaySDK.Signature.DigestType, b: GalaxyPaySDK.Signature.DigestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
public typealias AFResult<Success> = Swift.Result<Success, GalaxyPaySDK.AFError>
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func insertionFrameBelow(view: UIKit.UIView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) public func insertionFrameOnRight(view: UIKit.UIView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) public func insertSubview(_ subview: UIKit.UIView, z: GalaxyPaySDK.BoxLayout.ZPosition? = nil)
}
public struct BaseResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GPay : ObjectiveC.NSObject {
  final public let unit: Swift.String
  public static var shared: GalaxyPaySDK.GPay {
    get
  }
  public func showGalaxyPayPayment(_ paymentInfo: [Swift.String : Any], callback: @escaping (Swift.String) -> Swift.Void)
  public func showGalaxyPayWallet(_ userInfo: [Swift.String : Swift.String], callback: @escaping (Swift.String) -> Swift.Void)
  public func showGalaxyPayQRScanner(_ qrInfo: [Swift.String : Swift.String], callback: @escaping (Swift.String) -> Swift.Void)
  public func goGPUPCPayment(_ paymentInfo: [Swift.String : Swift.String], callback: @escaping (Swift.String) -> Swift.Void)
  public func getWalletBalance(_ userInfo: [Swift.String : Swift.String], callback: @escaping (Swift.String) -> Swift.Void)
  public func showVJPayment(_ paymentInfo: [Swift.String : Any], callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func showGPWallet(_ userInfo: [Swift.String : Swift.String], callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func showGPQRScanner(_ qrInfo: [Swift.String : Swift.String], callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func showGPPayment(_ paymentInfo: [Swift.String : Any], model: GalaxyPaySDK.BaseBankObjectValue?, callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func showGPTopup(_ topupInfo: [Swift.String : Any], callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func showGPLinkBank(_ userInfo: [Swift.String : Any], callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func getMerchantSof(_ userInfo: [Swift.String : Any], callback: @escaping (GalaxyPaySDK.ResponseMerchantSof?) -> Swift.Void)
  public func showPasswordAndSecurity(data: Any?)
  public func callLivenessFaceDetect(vc: UIKit.UIViewController, callback: @escaping (Swift.String, Swift.String?, [Swift.String : Swift.String?]) -> ())
  @objc override dynamic public init()
  @objc deinit
}
extension GalaxyPaySDK.GPay {
  public func showGPHomeWallet(_ userInfo: [Swift.String : Any], callback: @escaping (Swift.Bool, Swift.Int, Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)
  public func getSelectedLanguage(callback: @escaping (Swift.String) -> Swift.Void)
  public func broadcastNotification(_ payload: Swift.String)
}
extension GalaxyPaySDK.GPay {
  public func showVerInformation(callback: @escaping (Swift.String) -> Swift.Void)
  public func showDemoVerInformation(callback: @escaping (Swift.String) -> Swift.Void)
}
extension GalaxyPaySDK.BoxAnchorable {
  public func pinSameEdge(_ edge: GalaxyPaySDK.BoxEdge, to obj: GalaxyPaySDK.BoxAnchorable, pin: GalaxyPaySDK.BoxLayout.Pin, sca: UIKit.UISemanticContentAttribute) -> UIKit.NSLayoutConstraint
}
extension UIKit.UILayoutGuide {
  @_Concurrency.MainActor(unsafe) public var semanticContentAttribute: UIKit.UISemanticContentAttribute {
    get
  }
}
extension GalaxyPaySDK.BoxItem {
  public func left(_ left: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func left(_ leftPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxItem
  public func right(_ rightPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxItem
  public func right(_ right: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func top(_ topPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxItem
  public func top(_ top: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func bottom(_ bottomPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxItem
  public func bottom(_ bottom: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func all(_ value: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxItem
  public func allX(_ value: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxItem
  public func allY(_ value: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxItem
  public func insets(_ insets: UIKit.UIEdgeInsets) -> GalaxyPaySDK.BoxItem
  public func centerX(offset: CoreFoundation.CGFloat = 0.0, padding: CoreFoundation.CGFloat? = 0.0) -> GalaxyPaySDK.BoxItem
  public func centerY(offset: CoreFoundation.CGFloat = 0.0, padding: CoreFoundation.CGFloat? = 0.0) -> GalaxyPaySDK.BoxItem
  public func useIf(_ condition: Swift.Bool) -> GalaxyPaySDK.BoxItem?
  public var useIfVisible: GalaxyPaySDK.BoxItem? {
    get
  }
  public static func guide() -> GalaxyPaySDK.BoxItem
  public static func width(_ widthPin: GalaxyPaySDK.BoxLayout.Pin) -> GalaxyPaySDK.BoxItem
  public static func width(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func width(_ widthPin: GalaxyPaySDK.BoxLayout.Pin) -> GalaxyPaySDK.BoxItem
  public func width(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public static func relativeWidth(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public static func relativeWidth(_ widthPin: GalaxyPaySDK.BoxLayout.MultiPin) -> GalaxyPaySDK.BoxItem
  public func relativeWidth(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func relativeWidth(_ widthPin: GalaxyPaySDK.BoxLayout.MultiPin) -> GalaxyPaySDK.BoxItem
  public static func height(_ heightPin: GalaxyPaySDK.BoxLayout.Pin) -> GalaxyPaySDK.BoxItem
  public static func height(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func height(_ heightPin: GalaxyPaySDK.BoxLayout.Pin) -> GalaxyPaySDK.BoxItem
  public func height(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public static func relativeHeight(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public static func relativeHeight(_ heightPin: GalaxyPaySDK.BoxLayout.MultiPin) -> GalaxyPaySDK.BoxItem
  public func relativeHeight(_ heightPin: GalaxyPaySDK.BoxLayout.MultiPin) -> GalaxyPaySDK.BoxItem
  public func relativeHeight(_ value: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxItem
  public func size(_ size: CoreFoundation.CGSize) -> GalaxyPaySDK.BoxItem
  public func point(_ point: CoreFoundation.CGPoint) -> GalaxyPaySDK.BoxItem
  public func rect(_ rect: CoreFoundation.CGRect) -> GalaxyPaySDK.BoxItem
  public static func flex(_ value: CoreFoundation.CGFloat = 1.0) -> GalaxyPaySDK.BoxItem
  public func flex(_ value: CoreFoundation.CGFloat = 1.0) -> GalaxyPaySDK.BoxItem
}
extension Foundation.Data {
  public func sha256() -> Swift.String
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: GalaxyPaySDK.HTTPMethod
  public static let delete: GalaxyPaySDK.HTTPMethod
  public static let get: GalaxyPaySDK.HTTPMethod
  public static let head: GalaxyPaySDK.HTTPMethod
  public static let options: GalaxyPaySDK.HTTPMethod
  public static let patch: GalaxyPaySDK.HTTPMethod
  public static let post: GalaxyPaySDK.HTTPMethod
  public static let put: GalaxyPaySDK.HTTPMethod
  public static let trace: GalaxyPaySDK.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public typealias AFIDataResponse<T> = GalaxyPaySDK.DataResponse<T, GalaxyPaySDK.AFIError>
public typealias AFIResult<T> = Swift.Result<T, GalaxyPaySDK.AFIError>
@_hasMissingDesignatedInitializers open class RequestReceipt {
  final public let request: GalaxyPaySDK.DataRequest
  final public let receiptID: Swift.String
  @objc deinit
}
open class ImageDownloader {
  public typealias CompletionHandler = (GalaxyPaySDK.AFIDataResponse<GalaxyPaySDK.Image>) -> Swift.Void
  public typealias ProgressHandler = GalaxyPaySDK.DataRequest.ProgressHandler
  public enum DownloadPrioritization {
    case fifo, lifo
    public static func == (a: GalaxyPaySDK.ImageDownloader.DownloadPrioritization, b: GalaxyPaySDK.ImageDownloader.DownloadPrioritization) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let imageCache: GalaxyPaySDK.ImageRequestCache?
  open var credential: Foundation.URLCredential? {
    get
  }
  public var imageResponseSerializer: GalaxyPaySDK.ImageResponseSerializer
  final public let session: GalaxyPaySDK.Session
  public static let `default`: GalaxyPaySDK.ImageDownloader
  open class func defaultURLSessionConfiguration() -> Foundation.URLSessionConfiguration
  open class func defaultURLCache() -> Foundation.URLCache
  public init(configuration: Foundation.URLSessionConfiguration = ImageDownloader.defaultURLSessionConfiguration(), downloadPrioritization: GalaxyPaySDK.ImageDownloader.DownloadPrioritization = .fifo, maximumActiveDownloads: Swift.Int = 4, imageCache: GalaxyPaySDK.ImageRequestCache? = AutoPurgingImageCache())
  public init(session: GalaxyPaySDK.Session, downloadPrioritization: GalaxyPaySDK.ImageDownloader.DownloadPrioritization = .fifo, maximumActiveDownloads: Swift.Int = 4, imageCache: GalaxyPaySDK.ImageRequestCache? = AutoPurgingImageCache())
  open func addAuthentication(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession)
  open func addAuthentication(usingCredential credential: Foundation.URLCredential)
  @discardableResult
  open func download(_ urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, receiptID: Swift.String = UUID().uuidString, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: GalaxyPaySDK.ImageDownloader.CompletionHandler? = nil) -> GalaxyPaySDK.RequestReceipt?
  @discardableResult
  open func download(_ urlRequests: [GalaxyPaySDK.URLRequestConvertible], filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: GalaxyPaySDK.ImageDownloader.CompletionHandler? = nil) -> [GalaxyPaySDK.RequestReceipt]
  open func cancelRequest(with requestReceipt: GalaxyPaySDK.RequestReceipt)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardManager : ObjectiveC.NSObject {
  @objc public static let shared: GalaxyPaySDK.IQKeyboardManager
  @objc final public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var keyboardDistanceFromTextField: CoreFoundation.CGFloat
  @objc final public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var toolbarManageBehaviour: GalaxyPaySDK.IQAutoToolbarManageBehaviour
  @objc final public var shouldToolbarUsesTextFieldTintColor: Swift.Bool
  @objc final public var toolbarTintColor: UIKit.UIColor?
  @objc final public var toolbarBarTintColor: UIKit.UIColor?
  @objc final public var previousNextDisplayMode: GalaxyPaySDK.IQPreviousNextDisplayMode
  @objc final public var toolbarPreviousBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarNextBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarDoneBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarPreviousBarButtonItemText: Swift.String?
  @objc final public var toolbarPreviousBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarNextBarButtonItemText: Swift.String?
  @objc final public var toolbarNextBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarDoneBarButtonItemText: Swift.String?
  @objc final public var toolbarDoneBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var shouldShowToolbarPlaceholder: Swift.Bool
  @objc final public var placeholderFont: UIKit.UIFont?
  @objc final public var placeholderColor: UIKit.UIColor?
  @objc final public var placeholderButtonColor: UIKit.UIColor?
  @objc final public var overrideKeyboardAppearance: Swift.Bool
  @objc final public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @objc final public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc final public func resignFirstResponder() -> Swift.Bool
  @objc final public var shouldPlayInputClicks: Swift.Bool
  @objc final public var layoutIfNeededOnUpdate: Swift.Bool
  @objc final public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc final public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc final public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc final public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc deinit
  @objc final public func reloadLayoutIfNeeded()
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardManager : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public struct BoxLayout : Swift.CustomStringConvertible {
  public typealias EdgePins = [GalaxyPaySDK.BoxEdge : GalaxyPaySDK.BoxLayout.Pin?]
  public var left: GalaxyPaySDK.BoxLayout.Pin?
  public var right: GalaxyPaySDK.BoxLayout.Pin?
  public var centerX: GalaxyPaySDK.BoxLayout.Pin?
  public var top: GalaxyPaySDK.BoxLayout.Pin?
  public var bottom: GalaxyPaySDK.BoxLayout.Pin?
  public var centerY: GalaxyPaySDK.BoxLayout.Pin?
  public var width: GalaxyPaySDK.BoxLayout.Pin?
  public var relativeWidth: GalaxyPaySDK.BoxLayout.MultiPin?
  public var height: GalaxyPaySDK.BoxLayout.Pin?
  public var relativeHeight: GalaxyPaySDK.BoxLayout.MultiPin?
  public var flex: CoreFoundation.CGFloat?
  public init()
  public static func withPins(top: GalaxyPaySDK.BoxLayout.Pin? = .zero, left: GalaxyPaySDK.BoxLayout.Pin? = .zero, bottom: GalaxyPaySDK.BoxLayout.Pin? = .zero, right: GalaxyPaySDK.BoxLayout.Pin? = .zero) -> GalaxyPaySDK.BoxLayout
  public static let zero: GalaxyPaySDK.BoxLayout
  public mutating func setPin(_ pin: GalaxyPaySDK.BoxLayout.Pin?, for edge: GalaxyPaySDK.BoxEdge)
  public func pinForEdge(_ edge: GalaxyPaySDK.BoxEdge) -> GalaxyPaySDK.BoxLayout.Pin?
  public static func boxEdgePins(_ pins: GalaxyPaySDK.BoxLayout.EdgePins) -> GalaxyPaySDK.BoxLayout
  public static func xCentered(offset: CoreFoundation.CGFloat = 0.0, padding: CoreFoundation.CGFloat? = 0.0) -> GalaxyPaySDK.BoxLayout
  public static func yCentered(offset: CoreFoundation.CGFloat = 0.0, padding: CoreFoundation.CGFloat? = 0.0) -> GalaxyPaySDK.BoxLayout
  public func withPins(top: GalaxyPaySDK.BoxLayout.Pin? = .zero, left: GalaxyPaySDK.BoxLayout.Pin? = .zero, bottom: GalaxyPaySDK.BoxLayout.Pin? = .zero, right: GalaxyPaySDK.BoxLayout.Pin? = .zero) -> GalaxyPaySDK.BoxLayout
  public func with(_ edge: GalaxyPaySDK.BoxEdge, _ pin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withLeft(_ leftPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withRight(_ rightPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withTop(_ topPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withBottom(_ bottomPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withWidth(_ widthPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withRelativeWidth(_ widthPin: GalaxyPaySDK.BoxLayout.MultiPin?) -> GalaxyPaySDK.BoxLayout
  public func withHeight(_ heightPin: GalaxyPaySDK.BoxLayout.Pin?) -> GalaxyPaySDK.BoxLayout
  public func withRelativeHeight(_ heightPin: GalaxyPaySDK.BoxLayout.MultiPin?) -> GalaxyPaySDK.BoxLayout
  public func withFlex(_ flexValue: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxLayout
  public var description: Swift.String {
    get
  }
}
public class EncryptedMessage : GalaxyPaySDK.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public func decrypted(with key: GalaxyPaySDK.PrivateKey, padding: GalaxyPaySDK.Padding) throws -> GalaxyPaySDK.ClearMessage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class PublicKey : GalaxyPaySDK.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  public static func publicKeys(pemEncoded pemString: Swift.String) -> [GalaxyPaySDK.PublicKey]
  @objc deinit
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : GalaxyPaySDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : GalaxyPaySDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : GalaxyPaySDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension GalaxyPaySDK.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : GalaxyPaySDK.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: GalaxyPaySDK.URLConvertible, method: GalaxyPaySDK.HTTPMethod, headers: GalaxyPaySDK.HTTPHeaders? = nil) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
extension UIKit.UIFont {
  public static func loadFonts()
}
public protocol ImageCache {
  func add(_ image: GalaxyPaySDK.Image, withIdentifier identifier: Swift.String)
  func removeImage(withIdentifier identifier: Swift.String) -> Swift.Bool
  @discardableResult
  func removeAllImages() -> Swift.Bool
  func image(withIdentifier identifier: Swift.String) -> GalaxyPaySDK.Image?
}
public protocol ImageRequestCache : GalaxyPaySDK.ImageCache {
  func add(_ image: GalaxyPaySDK.Image, for request: Foundation.URLRequest, withIdentifier identifier: Swift.String?)
  func removeImage(for request: Foundation.URLRequest, withIdentifier identifier: Swift.String?) -> Swift.Bool
  func image(for request: Foundation.URLRequest, withIdentifier identifier: Swift.String?) -> GalaxyPaySDK.Image?
}
open class AutoPurgingImageCache : GalaxyPaySDK.ImageRequestCache {
  open var memoryUsage: Swift.UInt64 {
    get
  }
  final public let memoryCapacity: Swift.UInt64
  final public let preferredMemoryUsageAfterPurge: Swift.UInt64
  public init(memoryCapacity: Swift.UInt64 = 100_000_000, preferredMemoryUsageAfterPurge: Swift.UInt64 = 60_000_000)
  @objc deinit
  open func add(_ image: GalaxyPaySDK.Image, for request: Foundation.URLRequest, withIdentifier identifier: Swift.String? = nil)
  open func add(_ image: GalaxyPaySDK.Image, withIdentifier identifier: Swift.String)
  @discardableResult
  open func removeImage(for request: Foundation.URLRequest, withIdentifier identifier: Swift.String?) -> Swift.Bool
  @discardableResult
  open func removeImages(matching request: Foundation.URLRequest) -> Swift.Bool
  @discardableResult
  open func removeImage(withIdentifier identifier: Swift.String) -> Swift.Bool
  @discardableResult
  @objc open func removeAllImages() -> Swift.Bool
  open func image(for request: Foundation.URLRequest, withIdentifier identifier: Swift.String? = nil) -> GalaxyPaySDK.Image?
  open func image(withIdentifier identifier: Swift.String) -> GalaxyPaySDK.Image?
  open func imageCacheKey(for request: Foundation.URLRequest, withIdentifier identifier: Swift.String?) -> Swift.String
}
open class RetryPolicy : GalaxyPaySDK.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: GalaxyPaySDK.Request, for session: GalaxyPaySDK.Session, dueTo error: Swift.Error, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
  open func shouldRetry(request: GalaxyPaySDK.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
open class ConnectionLostRetryPolicy : GalaxyPaySDK.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [GalaxyPaySDK.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: GalaxyPaySDK.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: GalaxyPaySDK.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> GalaxyPaySDK.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension GalaxyPaySDK.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension GalaxyPaySDK.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: GalaxyPaySDK.HTTPHeader...)
  public typealias ArrayLiteralElement = GalaxyPaySDK.HTTPHeader
}
extension GalaxyPaySDK.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[GalaxyPaySDK.HTTPHeader]>
}
extension GalaxyPaySDK.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> GalaxyPaySDK.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = GalaxyPaySDK.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<GalaxyPaySDK.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[GalaxyPaySDK.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<GalaxyPaySDK.HTTPHeaders>
}
extension GalaxyPaySDK.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: GalaxyPaySDK.HTTPHeader, b: GalaxyPaySDK.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension GalaxyPaySDK.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension GalaxyPaySDK.HTTPHeader {
  public static func accept(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func authorization(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func contentType(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> GalaxyPaySDK.HTTPHeader
}
extension GalaxyPaySDK.HTTPHeaders {
  public static let `default`: GalaxyPaySDK.HTTPHeaders
}
extension GalaxyPaySDK.HTTPHeader {
  public static let defaultAcceptEncoding: GalaxyPaySDK.HTTPHeader
  public static let defaultAcceptLanguage: GalaxyPaySDK.HTTPHeader
  public static let defaultUserAgent: GalaxyPaySDK.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: GalaxyPaySDK.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: GalaxyPaySDK.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: GalaxyPaySDK.HTTPHeaders {
    get
    set
  }
}
public protocol ClassNameProtocol {
  static var className: Swift.String { get }
  var className: Swift.String { get }
}
extension GalaxyPaySDK.ClassNameProtocol {
  public static var className: Swift.String {
    get
  }
  public var className: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject : GalaxyPaySDK.ClassNameProtocol {
}
@_hasMissingDesignatedInitializers public class OpenTelemetryService {
  @objc deinit
}
public protocol ImageFilter {
  var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image { get }
  var identifier: Swift.String { get }
}
extension GalaxyPaySDK.ImageFilter {
  public var identifier: Swift.String {
    get
  }
}
public protocol Sizable {
  var size: CoreFoundation.CGSize { get }
}
extension GalaxyPaySDK.ImageFilter where Self : GalaxyPaySDK.Sizable {
  public var identifier: Swift.String {
    get
  }
}
public protocol Roundable {
  var radius: CoreFoundation.CGFloat { get }
}
extension GalaxyPaySDK.ImageFilter where Self : GalaxyPaySDK.Roundable {
  public var identifier: Swift.String {
    get
  }
}
public struct DynamicImageFilter : GalaxyPaySDK.ImageFilter {
  public let identifier: Swift.String
  public let filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image
  public init(_ identifier: Swift.String, filter: @escaping (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image)
}
public protocol CompositeImageFilter : GalaxyPaySDK.ImageFilter {
  var filters: [GalaxyPaySDK.ImageFilter] { get }
}
extension GalaxyPaySDK.CompositeImageFilter {
  public var identifier: Swift.String {
    get
  }
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
}
public struct DynamicCompositeImageFilter : GalaxyPaySDK.CompositeImageFilter {
  public let filters: [GalaxyPaySDK.ImageFilter]
  public init(_ filters: [GalaxyPaySDK.ImageFilter])
  public init(_ filters: GalaxyPaySDK.ImageFilter...)
}
public struct ScaledToSizeFilter : GalaxyPaySDK.ImageFilter, GalaxyPaySDK.Sizable {
  public let size: CoreFoundation.CGSize
  public init(size: CoreFoundation.CGSize)
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
}
public struct AspectScaledToFitSizeFilter : GalaxyPaySDK.ImageFilter, GalaxyPaySDK.Sizable {
  public let size: CoreFoundation.CGSize
  public init(size: CoreFoundation.CGSize)
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
}
public struct AspectScaledToFillSizeFilter : GalaxyPaySDK.ImageFilter, GalaxyPaySDK.Sizable {
  public let size: CoreFoundation.CGSize
  public init(size: CoreFoundation.CGSize)
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
}
public struct RoundedCornersFilter : GalaxyPaySDK.ImageFilter, GalaxyPaySDK.Roundable {
  public let radius: CoreFoundation.CGFloat
  public let divideRadiusByImageScale: Swift.Bool
  public init(radius: CoreFoundation.CGFloat, divideRadiusByImageScale: Swift.Bool = false)
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
  public var identifier: Swift.String {
    get
  }
}
public struct CircleFilter : GalaxyPaySDK.ImageFilter {
  public init()
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
}
public protocol CoreImageFilter : GalaxyPaySDK.ImageFilter {
  var filterName: Swift.String { get }
  var parameters: [Swift.String : Any] { get }
}
extension GalaxyPaySDK.ImageFilter where Self : GalaxyPaySDK.CoreImageFilter {
  public var filter: (GalaxyPaySDK.Image) -> GalaxyPaySDK.Image {
    get
  }
  public var identifier: Swift.String {
    get
  }
}
public struct BlurFilter : GalaxyPaySDK.ImageFilter, GalaxyPaySDK.CoreImageFilter {
  public let filterName: Swift.String
  public let parameters: [Swift.String : Any]
  public init(blurRadius: Swift.UInt = 10)
}
public struct ScaledToSizeWithRoundedCornersFilter : GalaxyPaySDK.CompositeImageFilter {
  public init(size: CoreFoundation.CGSize, radius: CoreFoundation.CGFloat, divideRadiusByImageScale: Swift.Bool = false)
  public let filters: [GalaxyPaySDK.ImageFilter]
}
public struct AspectScaledToFillSizeWithRoundedCornersFilter : GalaxyPaySDK.CompositeImageFilter {
  public init(size: CoreFoundation.CGSize, radius: CoreFoundation.CGFloat, divideRadiusByImageScale: Swift.Bool = false)
  public let filters: [GalaxyPaySDK.ImageFilter]
}
public struct ScaledToSizeCircleFilter : GalaxyPaySDK.CompositeImageFilter {
  public init(size: CoreFoundation.CGSize)
  public let filters: [GalaxyPaySDK.ImageFilter]
}
public struct AspectScaledToFillSizeCircleFilter : GalaxyPaySDK.CompositeImageFilter {
  public init(size: CoreFoundation.CGSize)
  public let filters: [GalaxyPaySDK.ImageFilter]
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardManager {
  @objc final public var movedDistance: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var movedDistanceChanged: ((CoreFoundation.CGFloat) -> Swift.Void)? {
    @objc get
    @objc set(newValue)
  }
}
public enum AFIError : Swift.Error {
  case requestCancelled
  case imageSerializationFailed
  case alamofireError(GalaxyPaySDK.AFError)
}
extension GalaxyPaySDK.AFIError {
  public var isRequestCancelledError: Swift.Bool {
    get
  }
  public var isImageSerializationFailedError: Swift.Bool {
    get
  }
  public var isAlamofireError: Swift.Bool {
    get
  }
}
extension GalaxyPaySDK.AFIError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public let AF: GalaxyPaySDK.Session
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: GalaxyPaySDK.URLEncodedFormEncoder.ArrayEncoding, b: GalaxyPaySDK.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: GalaxyPaySDK.URLEncodedFormEncoder.BoolEncoding, b: GalaxyPaySDK.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: GalaxyPaySDK.URLEncodedFormEncoder.SpaceEncoding, b: GalaxyPaySDK.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: GalaxyPaySDK.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: GalaxyPaySDK.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: GalaxyPaySDK.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: GalaxyPaySDK.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: GalaxyPaySDK.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: GalaxyPaySDK.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: GalaxyPaySDK.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: GalaxyPaySDK.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: GalaxyPaySDK.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: GalaxyPaySDK.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: GalaxyPaySDK.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: GalaxyPaySDK.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor(unsafe) open class IQTitleBarButtonItem : GalaxyPaySDK.IQBarButtonItem {
  @objc @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var invocation: GalaxyPaySDK.IQInvocation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.URLRequest {
  public var method: GalaxyPaySDK.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
public enum AuthenticationUI {
  case allow
  case fail
  case skip
  public static func == (a: GalaxyPaySDK.AuthenticationUI, b: GalaxyPaySDK.AuthenticationUI) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 9.0, macOS 10.11, *)
extension GalaxyPaySDK.AuthenticationUI {
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : GalaxyPaySDK.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : GalaxyPaySDK.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> GalaxyPaySDK.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : GalaxyPaySDK.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : GalaxyPaySDK.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: GalaxyPaySDK.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: GalaxyPaySDK.RevocationTrustEvaluator.Options
    public static let ocsp: GalaxyPaySDK.RevocationTrustEvaluator.Options
    public static let preferCRL: GalaxyPaySDK.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: GalaxyPaySDK.RevocationTrustEvaluator.Options
    public static let any: GalaxyPaySDK.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = GalaxyPaySDK.RevocationTrustEvaluator.Options
    public typealias Element = GalaxyPaySDK.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: GalaxyPaySDK.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PinnedCertificatesTrustEvaluator : GalaxyPaySDK.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PublicKeysTrustEvaluator : GalaxyPaySDK.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class CompositeTrustEvaluator : GalaxyPaySDK.ServerTrustEvaluating {
  public init(evaluators: [GalaxyPaySDK.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = GalaxyPaySDK.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : GalaxyPaySDK.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == GalaxyPaySDK.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: GalaxyPaySDK.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
public typealias AnimationOptions = UIKit.UIView.AnimationOptions
extension UIKit.UIImageView {
  public enum ImageTransition {
    case noTransition
    case crossDissolve(Foundation.TimeInterval)
    case curlDown(Foundation.TimeInterval)
    case curlUp(Foundation.TimeInterval)
    case flipFromBottom(Foundation.TimeInterval)
    case flipFromLeft(Foundation.TimeInterval)
    case flipFromRight(Foundation.TimeInterval)
    case flipFromTop(Foundation.TimeInterval)
    case custom(duration: Foundation.TimeInterval, animationOptions: UIKit.UIView.AnimationOptions, animations: (UIKit.UIImageView, GalaxyPaySDK.Image) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?)
    public var duration: Foundation.TimeInterval {
      get
    }
    public var animationOptions: UIKit.UIView.AnimationOptions {
      get
    }
    public var animations: (UIKit.UIImageView, GalaxyPaySDK.Image) -> Swift.Void {
      get
    }
    public var completion: ((Swift.Bool) -> Swift.Void)? {
      get
    }
  }
}
extension UIKit.UIImageView : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = UIKit.UIImageView
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImageView {
  public var imageDownloader: GalaxyPaySDK.ImageDownloader? {
    get
    nonmutating set(downloader)
  }
  public static var sharedImageDownloader: GalaxyPaySDK.ImageDownloader {
    get
    set
  }
  public func setImage(withURL url: Foundation.URL, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, imageTransition: UIKit.UIImageView.ImageTransition = .noTransition, runImageTransitionIfCached: Swift.Bool = false, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  public func setImage(withURLRequest urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, imageTransition: UIKit.UIImageView.ImageTransition = .noTransition, runImageTransitionIfCached: Swift.Bool = false, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  public func cancelImageRequest()
  public func run(_ imageTransition: UIKit.UIImageView.ImageTransition, with image: GalaxyPaySDK.Image)
}
extension UIKit.UIImageView {
  @available(*, deprecated, message: "Replaced by `imageView.af.imageDownloader`")
  @_Concurrency.MainActor(unsafe) public var af_imageDownloader: GalaxyPaySDK.ImageDownloader? {
    get
    set
  }
  @available(*, deprecated, message: "Replaced by `imageView.af.sharedImageDownloader`")
  @_Concurrency.MainActor(unsafe) public class var af_sharedImageDownloader: GalaxyPaySDK.ImageDownloader {
    get
    set
  }
  @available(*, deprecated, message: "Replaced by `imageView.af.setImage(withURL: ...)`")
  @_Concurrency.MainActor(unsafe) public func af_setImage(withURL url: Foundation.URL, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, imageTransition: UIKit.UIImageView.ImageTransition = .noTransition, runImageTransitionIfCached: Swift.Bool = false, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Replaced by `imageView.af.setImage(withURLRequest: ...)`")
  @_Concurrency.MainActor(unsafe) public func af_setImage(withURLRequest urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, imageTransition: UIKit.UIImageView.ImageTransition = .noTransition, runImageTransitionIfCached: Swift.Bool = false, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Replaced by `imageView.af.cancelImageRequest()`")
  @_Concurrency.MainActor(unsafe) public func af_cancelImageRequest()
  @available(*, deprecated, message: "Replaced by `imageView.af.run(_:with:)`")
  @_Concurrency.MainActor(unsafe) public func run(_ imageTransition: UIKit.UIImageView.ImageTransition, with image: GalaxyPaySDK.Image)
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = GalaxyPaySDK.DataResponse<Value, GalaxyPaySDK.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: GalaxyPaySDK.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : GalaxyPaySDK.ResponseSerializer
  public init<Serializer>(_ request: GalaxyPaySDK.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : GalaxyPaySDK.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, GalaxyPaySDK.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, GalaxyPaySDK.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == GalaxyPaySDK.DataResponse<Value, GalaxyPaySDK.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension GalaxyPaySDK.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: GalaxyPaySDK.DataRequest, queue: Dispatch.DispatchQueue)
}
extension GalaxyPaySDK.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DataResponsePublisher<T> where Serializer : GalaxyPaySDK.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: GalaxyPaySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> GalaxyPaySDK.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: GalaxyPaySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> GalaxyPaySDK.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: GalaxyPaySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> GalaxyPaySDK.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = GalaxyPaySDK.DataStreamRequest.Stream<Value, GalaxyPaySDK.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: GalaxyPaySDK.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : GalaxyPaySDK.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, GalaxyPaySDK.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, GalaxyPaySDK.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == GalaxyPaySDK.DataStreamRequest.Stream<Value, GalaxyPaySDK.AFError>
}
extension GalaxyPaySDK.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DataStreamPublisher<Serializer.SerializedObject> where Serializer : GalaxyPaySDK.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), preprocessor: GalaxyPaySDK.DataPreprocessor = PassthroughPreprocessor()) -> GalaxyPaySDK.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = GalaxyPaySDK.DownloadResponse<Value, GalaxyPaySDK.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: GalaxyPaySDK.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : GalaxyPaySDK.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: GalaxyPaySDK.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : GalaxyPaySDK.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, GalaxyPaySDK.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, GalaxyPaySDK.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == GalaxyPaySDK.DownloadResponse<Value, GalaxyPaySDK.AFError>
}
extension GalaxyPaySDK.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DownloadResponsePublisher<T> where Serializer : GalaxyPaySDK.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DownloadResponsePublisher<T> where Serializer : GalaxyPaySDK.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: GalaxyPaySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> GalaxyPaySDK.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: GalaxyPaySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> GalaxyPaySDK.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: GalaxyPaySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> GalaxyPaySDK.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension GalaxyPaySDK.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: GalaxyPaySDK.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension GalaxyPaySDK.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> GalaxyPaySDK.DownloadResponsePublisher<Foundation.URL?>
}
public typealias AFDataResponse<Success> = GalaxyPaySDK.DataResponse<Success, GalaxyPaySDK.AFError>
public typealias AFDownloadResponse<Success> = GalaxyPaySDK.DownloadResponse<Success, GalaxyPaySDK.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension GalaxyPaySDK.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension GalaxyPaySDK.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> GalaxyPaySDK.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> GalaxyPaySDK.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> GalaxyPaySDK.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> GalaxyPaySDK.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension GalaxyPaySDK.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension GalaxyPaySDK.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> GalaxyPaySDK.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> GalaxyPaySDK.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> GalaxyPaySDK.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> GalaxyPaySDK.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public typealias ControlState = UIKit.UIControl.State
extension UIKit.UIButton : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = UIKit.UIButton
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIButton {
  public var imageDownloader: GalaxyPaySDK.ImageDownloader? {
    get
    nonmutating set
  }
  public static var sharedImageDownloader: GalaxyPaySDK.ImageDownloader {
    get
    set
  }
  public func setImage(for state: GalaxyPaySDK.ControlState, url: Foundation.URL, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  public func setImage(for state: GalaxyPaySDK.ControlState, urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  public func cancelImageRequest(for state: GalaxyPaySDK.ControlState)
  public func setBackgroundImage(for state: GalaxyPaySDK.ControlState, url: Foundation.URL, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  public func setBackgroundImage(for state: GalaxyPaySDK.ControlState, urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  public func cancelBackgroundImageRequest(for state: GalaxyPaySDK.ControlState)
}
extension UIKit.UIButton {
  @available(*, deprecated, message: "Replaced by `button.af.imageDownloader`")
  @_Concurrency.MainActor(unsafe) public var af_imageDownloader: GalaxyPaySDK.ImageDownloader? {
    get
    set
  }
  @available(*, deprecated, message: "Replaced by `button.af.sharedImageDownloader`")
  @_Concurrency.MainActor(unsafe) public class var af_sharedImageDownloader: GalaxyPaySDK.ImageDownloader {
    get
    set
  }
  @available(*, deprecated, message: "Replaced by `button.af.sharedImageDownloader`")
  @_Concurrency.MainActor(unsafe) public func af_setImage(for state: GalaxyPaySDK.ControlState, url: Foundation.URL, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Replaced by `button.af.sharedImageDownloader`")
  @_Concurrency.MainActor(unsafe) public func af_setImage(for state: GalaxyPaySDK.ControlState, urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func af_cancelImageRequest(for state: GalaxyPaySDK.ControlState)
  @available(*, deprecated, message: "Replaced by `button.af.sharedImageDownloader`")
  @_Concurrency.MainActor(unsafe) public func af_setBackgroundImage(for state: GalaxyPaySDK.ControlState, url: Foundation.URL, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Replaced by `button.af.sharedImageDownloader`")
  @_Concurrency.MainActor(unsafe) public func af_setBackgroundImage(for state: GalaxyPaySDK.ControlState, urlRequest: GalaxyPaySDK.URLRequestConvertible, cacheKey: Swift.String? = nil, placeholderImage: UIKit.UIImage? = nil, serializer: GalaxyPaySDK.ImageResponseSerializer? = nil, filter: GalaxyPaySDK.ImageFilter? = nil, progress: GalaxyPaySDK.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, completion: ((GalaxyPaySDK.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func af_cancelBackgroundImageRequest(for state: GalaxyPaySDK.ControlState)
}
public typealias Image = UIKit.UIImage
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: GalaxyPaySDK.Request.State, b: GalaxyPaySDK.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: GalaxyPaySDK.EventMonitor?
  final public let interceptor: GalaxyPaySDK.RequestInterceptor?
  weak public var delegate: GalaxyPaySDK.RequestDelegate? {
    get
  }
  public var state: GalaxyPaySDK.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: GalaxyPaySDK.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: GalaxyPaySDK.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: GalaxyPaySDK.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping GalaxyPaySDK.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping GalaxyPaySDK.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: GalaxyPaySDK.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: GalaxyPaySDK.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension GalaxyPaySDK.Request : Swift.Equatable {
  public static func == (lhs: GalaxyPaySDK.Request, rhs: GalaxyPaySDK.Request) -> Swift.Bool
}
extension GalaxyPaySDK.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GalaxyPaySDK.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension GalaxyPaySDK.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: GalaxyPaySDK.Request)
  func retryResult(for request: GalaxyPaySDK.Request, dueTo error: GalaxyPaySDK.AFError, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
  func retryRequest(_ request: GalaxyPaySDK.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : GalaxyPaySDK.Request {
  final public let convertible: GalaxyPaySDK.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping GalaxyPaySDK.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : GalaxyPaySDK.Request {
  public typealias Handler<Success, Failure> = (GalaxyPaySDK.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: GalaxyPaySDK.DataStreamRequest.Event<Success, Failure>
    public let token: GalaxyPaySDK.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(GalaxyPaySDK.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: GalaxyPaySDK.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: GalaxyPaySDK.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping GalaxyPaySDK.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension GalaxyPaySDK.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: GalaxyPaySDK.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : GalaxyPaySDK.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: GalaxyPaySDK.DownloadRequest.Options
    public static let removePreviousFile: GalaxyPaySDK.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = GalaxyPaySDK.DownloadRequest.Options
    public typealias Element = GalaxyPaySDK.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: GalaxyPaySDK.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: GalaxyPaySDK.DownloadRequest.Options = []) -> GalaxyPaySDK.DownloadRequest.Destination
  public enum Downloadable {
    case request(GalaxyPaySDK.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: GalaxyPaySDK.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping GalaxyPaySDK.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : GalaxyPaySDK.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: GalaxyPaySDK.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: GalaxyPaySDK.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> GalaxyPaySDK.UploadRequest.Uploadable
}
extension GalaxyPaySDK.UploadRequest.Uploadable : GalaxyPaySDK.UploadableConvertible {
  public func createUploadable() throws -> GalaxyPaySDK.UploadRequest.Uploadable
}
public protocol UploadConvertible : GalaxyPaySDK.URLRequestConvertible, GalaxyPaySDK.UploadableConvertible {
}
prefix operator *
prefix public func * (m: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxLayout.MultiPin
prefix public func * (m: Swift.Double) -> GalaxyPaySDK.BoxLayout.MultiPin
prefix operator >=
prefix public func >= (v: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func >= (v: Swift.Double) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func >= (v: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func >= (v: Swift.Double?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func >= (v: Swift.Int) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func >= (v: Swift.Int?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix operator <=
prefix public func <= (v: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func <= (v: Swift.Double) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func <= (v: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func <= (v: Swift.Double?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func <= (v: Swift.Int) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func <= (v: Swift.Int?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix operator ==
prefix public func == (v: CoreFoundation.CGFloat) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func == (v: Swift.Double) -> GalaxyPaySDK.BoxLayout.Pin
prefix public func == (v: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func == (v: Swift.Double?) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func == (v: Swift.Int) -> GalaxyPaySDK.BoxLayout.Pin?
prefix public func == (v: Swift.Int?) -> GalaxyPaySDK.BoxLayout.Pin?
public protocol BaseBankObjectValue {
  var bankId: Swift.String { get }
  var bankShortName: Swift.String { get }
  var channelId: Swift.String { get }
  var cardNumber: Swift.String { get }
  var cardNumber4lastDigit: Swift.String { get }
  var bankToken: Swift.String { get }
  var active: Swift.Bool { get }
  var icon: Swift.String { get }
  var statusErrMess: Swift.String { get }
}
public protocol BoxAnchorable : AnyObject {
  var leftAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var leadingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var trailingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var rightAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var topAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var bottomAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var centerXAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var centerYAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var widthAnchor: UIKit.NSLayoutDimension { get }
  var heightAnchor: UIKit.NSLayoutDimension { get }
  var semanticContentAttribute: UIKit.UISemanticContentAttribute { get }
}
extension UIKit.UIView : GalaxyPaySDK.BoxAnchorable {
}
extension UIKit.UILayoutGuide : GalaxyPaySDK.BoxAnchorable {
}
public typealias BoxItemUpdate = (GalaxyPaySDK.BoxItem) -> GalaxyPaySDK.BoxItem
public struct BoxItem : Swift.CustomStringConvertible {
  public var layout: GalaxyPaySDK.BoxLayout
  public var view: UIKit.UIView? {
    get
    set(aView)
  }
  public var guide: UIKit.UILayoutGuide? {
    get
    set(aGuide)
  }
  public init(view: UIKit.UIView, layout: GalaxyPaySDK.BoxLayout = .zero)
  public init(guide: UIKit.UILayoutGuide, layout: GalaxyPaySDK.BoxLayout = .zero)
  public var description: Swift.String {
    get
  }
}
@IBDesignable extension UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : GalaxyPaySDK.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: GalaxyPaySDK.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: GalaxyPaySDK.AuthenticationError, b: GalaxyPaySDK.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : GalaxyPaySDK.RequestInterceptor where AuthenticatorType : GalaxyPaySDK.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: GalaxyPaySDK.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: GalaxyPaySDK.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: GalaxyPaySDK.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: GalaxyPaySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: GalaxyPaySDK.Request, for session: GalaxyPaySDK.Session, dueTo error: Swift.Error, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreContentInsetAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentIQContainerViewController() -> UIKit.UIViewController?
  @objc @available(*, deprecated, message: "Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.")
  @IBOutlet @_Concurrency.MainActor(unsafe) dynamic public var IQLayoutGuideConstraint: UIKit.NSLayoutConstraint? {
    @objc get
    @objc set(newValue)
  }
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var mainKeyWindow: UIKit.UIWindow? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class BoxView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(axis: GalaxyPaySDK.BoxLayout.Axis = .y, spacing: CoreFoundation.CGFloat = 0.0, insets: UIKit.UIEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) public var axis: GalaxyPaySDK.BoxLayout.Axis {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var insetsAreMargins: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var insets: UIKit.UIEdgeInsets {
    get
    set(newInsets)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var spacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var excludeHiddenViews: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var forceSubviewsSCA: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowNotManagedViews: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var managedConstraints: [UIKit.NSLayoutConstraint] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var managedViews: [UIKit.UIView] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var managedGuides: [UIKit.UILayoutGuide] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var items: [GalaxyPaySDK.BoxItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var optItems: [GalaxyPaySDK.BoxItem?] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func withItems(_ items: [GalaxyPaySDK.BoxItem]) -> Self
  @_Concurrency.MainActor(unsafe) public func setViews(_ views: [UIKit.UIView], layout: GalaxyPaySDK.BoxLayout = .zero)
  @_Concurrency.MainActor(unsafe) public func addItem(_ item: GalaxyPaySDK.BoxItem)
  @_Concurrency.MainActor(unsafe) public func insertItem(_ item: GalaxyPaySDK.BoxItem, after view: UIKit.UIView?, z: GalaxyPaySDK.BoxLayout.ZPosition? = nil)
  @_Concurrency.MainActor(unsafe) public func insertItem(_ item: GalaxyPaySDK.BoxItem, before view: UIKit.UIView?, z: GalaxyPaySDK.BoxLayout.ZPosition? = nil)
  @_Concurrency.MainActor(unsafe) public func setLayout(_ layout: GalaxyPaySDK.BoxLayout, for obj: GalaxyPaySDK.BoxAnchorable?)
  @_Concurrency.MainActor(unsafe) public func itemForObject(_ obj: GalaxyPaySDK.BoxAnchorable) -> GalaxyPaySDK.BoxItem?
  @_Concurrency.MainActor(unsafe) public func itemIndexForObject(_ obj: GalaxyPaySDK.BoxAnchorable) -> Swift.Int?
  @_Concurrency.MainActor(unsafe) public func updateItemForObject(_ obj: GalaxyPaySDK.BoxAnchorable, update: (GalaxyPaySDK.BoxItem) -> GalaxyPaySDK.BoxItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func animateChangesWithDurations(_ duration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willRemoveSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var semanticContentAttribute: UIKit.UISemanticContentAttribute {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var layoutMargins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @objc deinit
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: GalaxyPaySDK.ResponseCacher
  public static let doNotCache: GalaxyPaySDK.ResponseCacher
  public let behavior: GalaxyPaySDK.ResponseCacher.Behavior
  public init(behavior: GalaxyPaySDK.ResponseCacher.Behavior)
}
extension GalaxyPaySDK.ResponseCacher : GalaxyPaySDK.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: GalaxyPaySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: GalaxyPaySDK.Request, for session: GalaxyPaySDK.Session, dueTo error: Swift.Error, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : GalaxyPaySDK.RequestAdapter, GalaxyPaySDK.RequestRetrier {
}
extension GalaxyPaySDK.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: GalaxyPaySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: GalaxyPaySDK.Request, for session: GalaxyPaySDK.Session, dueTo error: Swift.Error, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, GalaxyPaySDK.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (GalaxyPaySDK.Request, GalaxyPaySDK.Session, Swift.Error, _ completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : GalaxyPaySDK.RequestInterceptor {
  public init(_ adaptHandler: @escaping GalaxyPaySDK.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: GalaxyPaySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
open class Retrier : GalaxyPaySDK.RequestInterceptor {
  public init(_ retryHandler: @escaping GalaxyPaySDK.RetryHandler)
  open func retry(_ request: GalaxyPaySDK.Request, for session: GalaxyPaySDK.Session, dueTo error: Swift.Error, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
  @objc deinit
}
open class Interceptor : GalaxyPaySDK.RequestInterceptor {
  final public let adapters: [GalaxyPaySDK.RequestAdapter]
  final public let retriers: [GalaxyPaySDK.RequestRetrier]
  public init(adaptHandler: @escaping GalaxyPaySDK.AdaptHandler, retryHandler: @escaping GalaxyPaySDK.RetryHandler)
  public init(adapter: GalaxyPaySDK.RequestAdapter, retrier: GalaxyPaySDK.RequestRetrier)
  public init(adapters: [GalaxyPaySDK.RequestAdapter] = [], retriers: [GalaxyPaySDK.RequestRetrier] = [], interceptors: [GalaxyPaySDK.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: GalaxyPaySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: GalaxyPaySDK.Request, for session: GalaxyPaySDK.Session, dueTo error: Swift.Error, completion: @escaping (GalaxyPaySDK.RetryResult) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) public class IQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardManager {
  @objc final public var keyboardShowing: Swift.Bool {
    @objc get
  }
}
extension UIKit.UIImage : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = UIKit.UIImage
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImage {
  public static func threadSafeImage(with data: Foundation.Data) -> UIKit.UIImage?
  public static func threadSafeImage(with data: Foundation.Data, scale: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Replaced by `UIImage.af.threadSafeImage(with:)`")
  public static func af_threadSafeImage(with data: Foundation.Data) -> UIKit.UIImage?
  @available(*, deprecated, message: "Replaced by `UIImage.af.threadSafeImage(with:scale:)`")
  public static func af_threadSafeImage(with data: Foundation.Data, scale: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImage {
  public var isInflated: Swift.Bool {
    get
    nonmutating set
  }
  public func inflate()
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Replaced by `image.af.isInflated`")
  public var af_inflated: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Replaced by `image.af.inflate()`")
  public func af_inflate()
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImage {
  public var containsAlphaComponent: Swift.Bool {
    get
  }
  public var isOpaque: Swift.Bool {
    get
  }
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Replaced by `image.af.containsAlphaComponent`")
  public var af_containsAlphaComponent: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Replaced by `image.af.isOpaque`")
  public var af_isOpaque: Swift.Bool {
    get
  }
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImage {
  public func imageScaled(to size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage
  public func imageAspectScaled(toFit size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage
  public func imageAspectScaled(toFill size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Replaced by `image.af.imageScale(to:scale:)`")
  public func af_imageScaled(to size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage
  @available(*, deprecated, message: "Replaced by `image.af.imageAspectScale(toFit:scale:)`")
  public func af_imageAspectScaled(toFit size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage
  @available(*, deprecated, message: "Replaced by `image.af.imageAspectScale(toFill:scale:)`")
  public func af_imageAspectScaled(toFill size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImage {
  public func imageRounded(withCornerRadius radius: CoreFoundation.CGFloat, divideRadiusByImageScale: Swift.Bool = false) -> UIKit.UIImage
  public func imageRoundedIntoCircle() -> UIKit.UIImage
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Replaced by `image.af.imageRounded(withCornerRadius:divideRadiusByImageScale:)`")
  public func af_imageRounded(withCornerRadius radius: CoreFoundation.CGFloat, divideRadiusByImageScale: Swift.Bool = false) -> UIKit.UIImage
  @available(*, deprecated, message: "Replaced by `image.af.imageRoundedIntoCircle()`")
  public func af_imageRoundedIntoCircle() -> UIKit.UIImage
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : UIKit.UIImage {
  public func imageFiltered(withCoreImageFilter name: Swift.String, parameters: [Swift.String : Any]? = nil) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Replaced by `image.af.imageFiltered(withCoreImageFilter:parameters:)`")
  public func af_imageFiltered(withCoreImageFilter name: Swift.String, parameters: [Swift.String : Any]? = nil) -> UIKit.UIImage?
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: GalaxyPaySDK.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: GalaxyPaySDK.AlamofireExtension<Self.ExtendedType> { get set }
}
extension GalaxyPaySDK.AlamofireExtended {
  public static var af: GalaxyPaySDK.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: GalaxyPaySDK.AlamofireExtension<Self> {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor(unsafe) open class IQTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardManager {
  @objc final public func reloadInputViews()
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardManager {
  @objc final public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc final public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc final public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc final public func goNext() -> Swift.Bool
}
open class ConstraintSwitch {
  public typealias Handler = () -> Swift.Void
  public var state: Swift.Bool {
    get
    set
  }
  public var onSet: Swift.Set<UIKit.NSLayoutConstraint> {
    get
    set
  }
  public var offSet: Swift.Set<UIKit.NSLayoutConstraint> {
    get
    set
  }
  public var stateChangeHandler: GalaxyPaySDK.ConstraintSwitch.Handler?
  public init()
  public init(state: Swift.Bool = false, onSet: [UIKit.NSLayoutConstraint?] = [], offSet: [UIKit.NSLayoutConstraint?] = [])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
final public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: (UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc final public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc final public func addTextFieldView(_ view: UIKit.UIView)
  @objc final public func removeTextFieldView(_ view: UIKit.UIView)
  @objc final public func addResponderFromView(_ view: UIKit.UIView)
  @objc final public func removeResponderFromView(_ view: UIKit.UIView)
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardReturnKeyHandler : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQKeyboardReturnKeyHandler : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc public init(barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector)
  @objc public init(image: UIKit.UIImage, action: ObjectiveC.Selector)
  @objc public init(title: Swift.String, action: ObjectiveC.Selector)
  final public let barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc final public let image: UIKit.UIImage?
  @objc final public let title: Swift.String?
  @objc final public let action: ObjectiveC.Selector?
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIImage {
  @objc public static func keyboardLeftImage() -> UIKit.UIImage?
  @objc public static func keyboardRightImage() -> UIKit.UIImage?
  @objc public static func keyboardUpImage() -> UIKit.UIImage?
  @objc public static func keyboardDownImage() -> UIKit.UIImage?
  @objc public static func keyboardPreviousImage() -> UIKit.UIImage?
  @objc public static func keyboardNextImage() -> UIKit.UIImage?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardToolbar: GalaxyPaySDK.IQToolbar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, rightBarButtonConfiguration: GalaxyPaySDK.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: GalaxyPaySDK.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: GalaxyPaySDK.IQBarButtonItemConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
}
public class PrivateKey : GalaxyPaySDK.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
public typealias BoxEdgePins = [GalaxyPaySDK.BoxEdge : GalaxyPaySDK.BoxLayout.Pin]
extension GalaxyPaySDK.BoxLayout {
  public struct Pin : Swift.CustomStringConvertible {
    public var constant: CoreFoundation.CGFloat
    public var relation: UIKit.NSLayoutConstraint.Relation
    public var priority: UIKit.UILayoutPriority
    public init(constant: CoreFoundation.CGFloat = 0.0, relation: UIKit.NSLayoutConstraint.Relation = .equal, priority: UIKit.UILayoutPriority = .required)
    public init(_ constant: Swift.Double)
    public static let zero: GalaxyPaySDK.BoxLayout.Pin
    public static func equal(_ constant: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxLayout.Pin?
    public static func greaterThanOrEqual(_ constant: CoreFoundation.CGFloat? = 0.0) -> GalaxyPaySDK.BoxLayout.Pin?
    public static func lessThanOrEqual(_ constant: CoreFoundation.CGFloat?) -> GalaxyPaySDK.BoxLayout.Pin?
    public func withPriority(_ pr: UIKit.UILayoutPriority) -> GalaxyPaySDK.BoxLayout.Pin
    public var almostRequired: GalaxyPaySDK.BoxLayout.Pin {
      get
    }
    public func required(_ offset: Swift.Float = 0.0) -> GalaxyPaySDK.BoxLayout.Pin
    public func high(_ offset: Swift.Float = 0.0) -> GalaxyPaySDK.BoxLayout.Pin
    public func low(_ offset: Swift.Float = 0.0) -> GalaxyPaySDK.BoxLayout.Pin
    public func exact(_ value: Swift.Float) -> GalaxyPaySDK.BoxLayout.Pin
    public var description: Swift.String {
      get
    }
  }
  public struct MultiPin {
    public var pin: GalaxyPaySDK.BoxLayout.Pin
    public var multiplier: CoreFoundation.CGFloat
    public var constant: CoreFoundation.CGFloat {
      get
      set
    }
    public var relation: UIKit.NSLayoutConstraint.Relation {
      get
      set
    }
    public var priority: UIKit.UILayoutPriority {
      get
      set
    }
    public init(_ pin: GalaxyPaySDK.BoxLayout.Pin)
    public init?(_ pin: GalaxyPaySDK.BoxLayout.Pin?)
    public func withPriority(_ pr: UIKit.UILayoutPriority) -> GalaxyPaySDK.BoxLayout.MultiPin
    public var almostRequired: GalaxyPaySDK.BoxLayout.MultiPin {
      get
    }
    public func required(_ offset: Swift.Float = 0.0) -> GalaxyPaySDK.BoxLayout.MultiPin
    public func high(_ offset: Swift.Float = 0.0) -> GalaxyPaySDK.BoxLayout.MultiPin
    public func low(_ offset: Swift.Float = 0.0) -> GalaxyPaySDK.BoxLayout.MultiPin
    public func exact(_ value: Swift.Float) -> GalaxyPaySDK.BoxLayout.MultiPin
    public init(multiplier: CoreFoundation.CGFloat = 1.0, pin: GalaxyPaySDK.BoxLayout.Pin = .zero)
    public init(multiplier: CoreFoundation.CGFloat = 1.0, constant: CoreFoundation.CGFloat = 0.0, relation: UIKit.NSLayoutConstraint.Relation = .equal)
    public init(_ multiplier: Swift.Double)
  }
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: GalaxyPaySDK.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var huggingX: UIKit.UILayoutPriority {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var huggingY: UIKit.UILayoutPriority {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var resistanceX: UIKit.UILayoutPriority {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var resistanceY: UIKit.UILayoutPriority {
    get
    set
  }
}
public protocol Message {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64Encoded base64String: Swift.String) throws
}
extension GalaxyPaySDK.Message {
  public var base64String: Swift.String {
    get
  }
  public init(base64Encoded base64String: Swift.String) throws
}
@_hasMissingDesignatedInitializers @objc(KeyPair) public class _objc_KeyPair : ObjectiveC.NSObject {
  @objc final public let privateKey: GalaxyPaySDK._objc_PrivateKey
  @objc final public let publicKey: GalaxyPaySDK._objc_PublicKey
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SwiftyRSA) public class _objc_SwiftyRSA : ObjectiveC.NSObject {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  @objc public class func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> GalaxyPaySDK._objc_KeyPair
  @objc override dynamic public init()
  @objc deinit
}
@objc(PublicKey) public class _objc_PublicKey : ObjectiveC.NSObject, GalaxyPaySDK.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: GalaxyPaySDK.PublicKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc public static func publicKeys(pemEncoded pemString: Swift.String) -> [GalaxyPaySDK._objc_PublicKey]
  @objc deinit
}
@objc(PrivateKey) public class _objc_PrivateKey : ObjectiveC.NSObject, GalaxyPaySDK.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: GalaxyPaySDK.PrivateKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(VerificationResult) public class _objc_VerificationResult : ObjectiveC.NSObject {
  @objc final public let isSuccessful: Swift.Bool
  @objc deinit
}
@objc(ClearMessage) public class _objc_ClearMessage : ObjectiveC.NSObject, GalaxyPaySDK.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: GalaxyPaySDK.ClearMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(string: Swift.String, using rawEncoding: Swift.UInt) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func string(encoding rawEncoding: Swift.UInt) throws -> Swift.String
  @objc public func encrypted(with key: GalaxyPaySDK._objc_PublicKey, padding: GalaxyPaySDK.Padding) throws -> GalaxyPaySDK._objc_EncryptedMessage
  @objc public func signed(with key: GalaxyPaySDK._objc_PrivateKey, digestType: GalaxyPaySDK._objc_Signature.DigestType) throws -> GalaxyPaySDK._objc_Signature
  @objc public func verify(with key: GalaxyPaySDK._objc_PublicKey, signature: GalaxyPaySDK._objc_Signature, digestType: GalaxyPaySDK._objc_Signature.DigestType) throws -> GalaxyPaySDK._objc_VerificationResult
  @objc deinit
}
@objc(EncryptedMessage) public class _objc_EncryptedMessage : ObjectiveC.NSObject, GalaxyPaySDK.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: GalaxyPaySDK.EncryptedMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func decrypted(with key: GalaxyPaySDK._objc_PrivateKey, padding: GalaxyPaySDK.Padding) throws -> GalaxyPaySDK._objc_ClearMessage
  @objc deinit
}
@objc(Signature) public class _objc_Signature : ObjectiveC.NSObject {
  @objc public enum DigestType : Swift.Int {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: GalaxyPaySDK.Signature)
  @objc public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQInvocation : ObjectiveC.NSObject {
  @objc weak final public var target: Swift.AnyObject?
  @objc final public var action: ObjectiveC.Selector
  @objc public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc final public func invoke(from: Any)
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: GalaxyPaySDK.URLRequestConvertible, with parameters: GalaxyPaySDK.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : GalaxyPaySDK.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: GalaxyPaySDK.URLEncoding.Destination, b: GalaxyPaySDK.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: GalaxyPaySDK.URLEncoding.ArrayEncoding, b: GalaxyPaySDK.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: GalaxyPaySDK.URLEncoding.BoolEncoding, b: GalaxyPaySDK.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: GalaxyPaySDK.URLEncoding {
    get
  }
  public static var queryString: GalaxyPaySDK.URLEncoding {
    get
  }
  public static var httpBody: GalaxyPaySDK.URLEncoding {
    get
  }
  public let destination: GalaxyPaySDK.URLEncoding.Destination
  public let arrayEncoding: GalaxyPaySDK.URLEncoding.ArrayEncoding
  public let boolEncoding: GalaxyPaySDK.URLEncoding.BoolEncoding
  public init(destination: GalaxyPaySDK.URLEncoding.Destination = .methodDependent, arrayEncoding: GalaxyPaySDK.URLEncoding.ArrayEncoding = .brackets, boolEncoding: GalaxyPaySDK.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: GalaxyPaySDK.URLRequestConvertible, with parameters: GalaxyPaySDK.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : GalaxyPaySDK.ParameterEncoding {
  public static var `default`: GalaxyPaySDK.JSONEncoding {
    get
  }
  public static var prettyPrinted: GalaxyPaySDK.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: GalaxyPaySDK.URLRequestConvertible, with parameters: GalaxyPaySDK.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: GalaxyPaySDK.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct ResponseMerchantSof : Swift.Codable {
  public let isSuccess: Swift.Bool
  public let errMessage: Swift.String?
  public let data: [GalaxyPaySDK.ResponseMerchantSof.BankData]
  public struct BankData : GalaxyPaySDK.BaseBankObjectValue, Swift.Codable {
    public var bankId: Swift.String
    public var bankShortName: Swift.String
    public var channelId: Swift.String
    public var cardNumber: Swift.String
    public var cardNumber4lastDigit: Swift.String
    public var bankToken: Swift.String
    public var active: Swift.Bool
    public var icon: Swift.String
    public var statusErrMess: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor(unsafe) open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @objc @_Concurrency.MainActor(unsafe) open var previousBarButton: GalaxyPaySDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var nextBarButton: GalaxyPaySDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleBarButton: GalaxyPaySDK.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var doneBarButton: GalaxyPaySDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var fixedSpaceBarButton: GalaxyPaySDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: GalaxyPaySDK.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping GalaxyPaySDK.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus, b: GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
extension GalaxyPaySDK.BoxLayout {
  public enum Axis {
    case x, y
    public var other: GalaxyPaySDK.BoxLayout.Axis {
      get
    }
    public static func == (a: GalaxyPaySDK.BoxLayout.Axis, b: GalaxyPaySDK.BoxLayout.Axis) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ZPosition {
    case back
    case front
    case below(_: UIKit.UIView?)
    case above(_: UIKit.UIView?)
  }
}
public enum BoxEdge : Swift.CaseIterable {
  case top, left, right, bottom, centerX, centerY
  public typealias Values = [GalaxyPaySDK.BoxEdge : CoreFoundation.CGFloat]
  public typealias Constraints = [GalaxyPaySDK.BoxEdge : UIKit.NSLayoutConstraint]
  public enum Position {
    case begin, center, end
    public static func == (a: GalaxyPaySDK.BoxEdge.Position, b: GalaxyPaySDK.BoxEdge.Position) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var str: Swift.String {
    get
  }
  public static func == (a: GalaxyPaySDK.BoxEdge, b: GalaxyPaySDK.BoxEdge) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [GalaxyPaySDK.BoxEdge]
  public static var allCases: [GalaxyPaySDK.BoxEdge] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor(unsafe) open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor(unsafe) open var invocation: GalaxyPaySDK.IQInvocation?
  @objc deinit
}
extension Foundation.Data {
  public func prependx509Header() -> Foundation.Data
  public func hasX509Header() throws -> Swift.Bool
  public func isAnHeaderlessKey() throws -> Swift.Bool
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : GalaxyPaySDK.DataResponseSerializerProtocol, GalaxyPaySDK.DownloadResponseSerializerProtocol {
  var dataPreprocessor: GalaxyPaySDK.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : GalaxyPaySDK.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : GalaxyPaySDK.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension GalaxyPaySDK.ResponseSerializer {
  public static var defaultDataPreprocessor: GalaxyPaySDK.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: GalaxyPaySDK.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension GalaxyPaySDK.DownloadResponseSerializerProtocol where Self : GalaxyPaySDK.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension GalaxyPaySDK.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : GalaxyPaySDK.DataResponseSerializerProtocol
}
extension GalaxyPaySDK.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : GalaxyPaySDK.DownloadResponseSerializerProtocol
}
public struct URLResponseSerializer : GalaxyPaySDK.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension GalaxyPaySDK.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : GalaxyPaySDK.ResponseSerializer {
  final public let dataPreprocessor: GalaxyPaySDK.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  public init(dataPreprocessor: GalaxyPaySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension GalaxyPaySDK.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension GalaxyPaySDK.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : GalaxyPaySDK.ResponseSerializer {
  final public let dataPreprocessor: GalaxyPaySDK.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  public init(dataPreprocessor: GalaxyPaySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension GalaxyPaySDK.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension GalaxyPaySDK.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
final public class JSONResponseSerializer : GalaxyPaySDK.ResponseSerializer {
  final public let dataPreprocessor: GalaxyPaySDK.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: GalaxyPaySDK.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension GalaxyPaySDK.DataRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension GalaxyPaySDK.DownloadRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: GalaxyPaySDK.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension GalaxyPaySDK.Empty : GalaxyPaySDK.EmptyResponse {
  public static func emptyValue() -> GalaxyPaySDK.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : GalaxyPaySDK.DataDecoder {
}
extension Foundation.PropertyListDecoder : GalaxyPaySDK.DataDecoder {
}
final public class DecodableResponseSerializer<T> : GalaxyPaySDK.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: GalaxyPaySDK.DataPreprocessor
  final public let decoder: GalaxyPaySDK.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  public init(dataPreprocessor: GalaxyPaySDK.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension GalaxyPaySDK.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension GalaxyPaySDK.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: GalaxyPaySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (GalaxyPaySDK.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : GalaxyPaySDK.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: GalaxyPaySDK.DataDecoder
  public let dataPreprocessor: GalaxyPaySDK.DataPreprocessor
  public init(decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), dataPreprocessor: GalaxyPaySDK.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : GalaxyPaySDK.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : GalaxyPaySDK.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension GalaxyPaySDK.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping GalaxyPaySDK.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping GalaxyPaySDK.DataStreamRequest.Handler<Serializer.SerializedObject, GalaxyPaySDK.AFError>) -> Self where Serializer : GalaxyPaySDK.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping GalaxyPaySDK.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: GalaxyPaySDK.DataDecoder = JSONDecoder(), preprocessor: GalaxyPaySDK.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping GalaxyPaySDK.DataStreamRequest.Handler<T, GalaxyPaySDK.AFError>) -> Self where T : Swift.Decodable
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : GalaxyPaySDK.ParameterEncoder {
  public static var `default`: GalaxyPaySDK.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: GalaxyPaySDK.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: GalaxyPaySDK.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
open class URLEncodedFormParameterEncoder : GalaxyPaySDK.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: GalaxyPaySDK.URLEncodedFormParameterEncoder.Destination, b: GalaxyPaySDK.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: GalaxyPaySDK.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: GalaxyPaySDK.URLEncodedFormEncoder
  final public let destination: GalaxyPaySDK.URLEncodedFormParameterEncoder.Destination
  public init(encoder: GalaxyPaySDK.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: GalaxyPaySDK.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension GalaxyPaySDK.BoxAnchorable {
  @discardableResult
  public func pin(_ edge: GalaxyPaySDK.BoxEdge, to toEdge: GalaxyPaySDK.BoxEdge? = nil, of anchorable: GalaxyPaySDK.BoxAnchorable, pin: GalaxyPaySDK.BoxLayout.Pin = .zero, sca: UIKit.UISemanticContentAttribute = .unspecified, activate: Swift.Bool = true) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pin(_ edge: GalaxyPaySDK.BoxEdge, to toEdge: GalaxyPaySDK.BoxEdge, of anchorable: GalaxyPaySDK.BoxAnchorable, offset: CoreFoundation.CGFloat, sca: UIKit.UISemanticContentAttribute = .unspecified, activate: Swift.Bool = true) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinHeight(to anchorable: GalaxyPaySDK.BoxAnchorable, multiPin: GalaxyPaySDK.BoxLayout.MultiPin) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinHeight(to anchorable: GalaxyPaySDK.BoxAnchorable, pin: GalaxyPaySDK.BoxLayout.Pin) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinHeight(to anchorable: GalaxyPaySDK.BoxAnchorable, offset: CoreFoundation.CGFloat = 0.0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinWidth(to anchorable: GalaxyPaySDK.BoxAnchorable, multiPin: GalaxyPaySDK.BoxLayout.MultiPin) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinWidth(to anchorable: GalaxyPaySDK.BoxAnchorable, pin: GalaxyPaySDK.BoxLayout.Pin) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinWidth(to anchorable: GalaxyPaySDK.BoxAnchorable, offset: CoreFoundation.CGFloat = 0.0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinHeight(_ pin: GalaxyPaySDK.BoxLayout.Pin) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinHeight(_ height: CoreFoundation.CGFloat) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinWidth(_ pin: GalaxyPaySDK.BoxLayout.Pin) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinWidth(_ width: CoreFoundation.CGFloat) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func pinSize(_ size: CoreFoundation.CGSize) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func pinAspect(_ aspect: CoreFoundation.CGFloat = 1.0) -> UIKit.NSLayoutConstraint?
  @discardableResult
  public func pinAspectFromSize(_ size: CoreFoundation.CGSize) -> UIKit.NSLayoutConstraint?
}
extension Swift.Array where Element : GalaxyPaySDK.BoxAnchorable, Element : Swift.Equatable {
  @discardableResult
  public func pinSameWidth() -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func pinSameHeight() -> [UIKit.NSLayoutConstraint]
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var al: Self {
    get
  }
  @_Concurrency.MainActor(unsafe) public func bxRemoveConstraintsForAttribute(_ attr: UIKit.NSLayoutConstraint.Attribute)
  @_Concurrency.MainActor(unsafe) public func bxRemoveConstraintsToView(_ view: UIKit.UIView)
}
extension UIKit.UIView {
  @discardableResult
  @available(*, deprecated, renamed: "pin")
  @_Concurrency.MainActor(unsafe) public func bxPin(_ attribute: UIKit.NSLayoutConstraint.Attribute, to toAttribute: UIKit.NSLayoutConstraint.Attribute, of view: UIKit.UIView, pin: GalaxyPaySDK.BoxLayout.Pin = .zero, activate: Swift.Bool = true) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinHeight")
  @_Concurrency.MainActor(unsafe) public func bxPinHeight(_ multiPin: GalaxyPaySDK.BoxLayout.MultiPin, to view: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinWidth")
  @_Concurrency.MainActor(unsafe) public func bxPinWidth(_ multiPin: GalaxyPaySDK.BoxLayout.MultiPin, to view: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinHeight")
  @_Concurrency.MainActor(unsafe) public func bxPinHeight(_ pin: GalaxyPaySDK.BoxLayout.Pin, to view: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinHeight")
  @_Concurrency.MainActor(unsafe) public func bxPinHeight(_ height: CoreFoundation.CGFloat = 0.0, to view: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinWidth")
  @_Concurrency.MainActor(unsafe) public func bxPinWidth(_ pin: GalaxyPaySDK.BoxLayout.Pin, to view: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinWidth")
  @_Concurrency.MainActor(unsafe) public func bxPinWidth(_ width: CoreFoundation.CGFloat = 0.0, to view: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  @available(*, deprecated, renamed: "pinSize")
  @_Concurrency.MainActor(unsafe) public func bxSetSize(_ size: CoreFoundation.CGSize) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @available(*, deprecated, renamed: "pinAspect")
  @_Concurrency.MainActor(unsafe) public func bxSetAspect(_ aspect: CoreFoundation.CGFloat = 1.0) -> UIKit.NSLayoutConstraint?
  @discardableResult
  @available(*, deprecated, renamed: "pinAspectFromSize")
  @_Concurrency.MainActor(unsafe) public func bxSetAspectFromSize(_ size: CoreFoundation.CGSize) -> UIKit.NSLayoutConstraint?
}
extension Swift.Array where Element : UIKit.UIView {
  @discardableResult
  @available(*, deprecated, renamed: "pinSameWidth")
  public func bxSameWidth() -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @available(*, deprecated, renamed: "pinSameHeight")
  public func bxSameHeight() -> [UIKit.NSLayoutConstraint]
}
public protocol Key : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension GalaxyPaySDK.Key {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
final public class ImageResponseSerializer : GalaxyPaySDK.ResponseSerializer {
  public static var deviceScreenScale: CoreFoundation.CGFloat {
    get
  }
  final public let imageScale: CoreFoundation.CGFloat
  final public let inflateResponseImage: Swift.Bool
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod>
  public init(imageScale: CoreFoundation.CGFloat = ImageResponseSerializer.deviceScreenScale, inflateResponseImage: Swift.Bool = true, emptyResponseCodes: Swift.Set<Swift.Int> = ImageResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<GalaxyPaySDK.HTTPMethod> = ImageResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> GalaxyPaySDK.Image
  final public func serializeImage(from data: Foundation.Data) throws -> GalaxyPaySDK.Image
  final public class func addAcceptableImageContentTypes(_ contentTypes: Swift.Set<Swift.String>)
  final public func validateContentType(for request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) throws
  public typealias SerializedObject = GalaxyPaySDK.Image
  @objc deinit
}
extension GalaxyPaySDK.DataRequest {
  public class var imageScale: CoreFoundation.CGFloat {
    get
  }
}
extension GalaxyPaySDK.DataRequest {
  @discardableResult
  public func responseImage(imageScale: CoreFoundation.CGFloat = DataRequest.imageScale, inflateResponseImage: Swift.Bool = true, queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (GalaxyPaySDK.AFDataResponse<GalaxyPaySDK.Image>) -> Swift.Void) -> Self
}
extension GalaxyPaySDK.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: GalaxyPaySDK.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : GalaxyPaySDK.EventMonitor {
  final public func requestDidResume(_ request: GalaxyPaySDK.Request)
  final public func requestDidSuspend(_ request: GalaxyPaySDK.Request)
  final public func requestDidCancel(_ request: GalaxyPaySDK.Request)
  final public func requestDidFinish(_ request: GalaxyPaySDK.Request)
  final public func request(_ request: GalaxyPaySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: GalaxyPaySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: GalaxyPaySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: GalaxyPaySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: GalaxyPaySDK.AFError?)
  @objc deinit
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(GalaxyPaySDK.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: GalaxyPaySDK.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: GalaxyPaySDK.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: GalaxyPaySDK.AFError.ServerTrustFailureReason.Output, options: GalaxyPaySDK.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: GalaxyPaySDK.URLConvertible)
  case multipartEncodingFailed(reason: GalaxyPaySDK.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: GalaxyPaySDK.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: GalaxyPaySDK.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: GalaxyPaySDK.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: GalaxyPaySDK.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: GalaxyPaySDK.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: GalaxyPaySDK.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: GalaxyPaySDK.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> GalaxyPaySDK.AFError
}
extension GalaxyPaySDK.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension GalaxyPaySDK.AFError {
  public var urlConvertible: GalaxyPaySDK.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension GalaxyPaySDK.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
public let kIQUseDefaultKeyboardDistance: CoreFoundation.CGFloat
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var enableMode: GalaxyPaySDK.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: GalaxyPaySDK.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var boxed: GalaxyPaySDK.BoxItem {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bi: GalaxyPaySDK.BoxItem {
    get
  }
  @_Concurrency.MainActor(unsafe) public func boxed(layout: GalaxyPaySDK.BoxLayout) -> GalaxyPaySDK.BoxItem
  @_Concurrency.MainActor(unsafe) public func updateBoxItem(_ update: (GalaxyPaySDK.BoxItem) -> GalaxyPaySDK.BoxItem)
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addBoxItem(_ item: GalaxyPaySDK.BoxItem) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addBoxedView(_ view: UIKit.UIView) -> [UIKit.NSLayoutConstraint]
}
extension UIKit.UILayoutGuide {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addBoxedView(_ view: UIKit.UIView, to superview: UIKit.UIView? = nil) -> [UIKit.NSLayoutConstraint]
}
extension GalaxyPaySDK.BoxAnchorable {
  @discardableResult
  public func addBoxItems(_ items: [GalaxyPaySDK.BoxItem], axis: GalaxyPaySDK.BoxLayout.Axis = .y, spacing: CoreFoundation.CGFloat = 0.0, insets: UIKit.UIEdgeInsets? = .zero) -> [UIKit.NSLayoutConstraint]
}
extension Swift.Array where Element : UIKit.UIView {
  public func boxed(layout: GalaxyPaySDK.BoxLayout) -> [GalaxyPaySDK.BoxItem]
  public var boxed: [GalaxyPaySDK.BoxItem] {
    get
  }
  public var bi: [GalaxyPaySDK.BoxItem] {
    get
  }
  public func inBoxView(axis: GalaxyPaySDK.BoxLayout.Axis = .y, spacing: CoreFoundation.CGFloat = 0.0, insets: UIKit.UIEdgeInsets = .zero) -> GalaxyPaySDK.BoxView
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GradientButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect = .zero)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwKeyStore {
  public enum SecError : Darwin.OSStatus, Swift.Error {
    case unimplemented
    case param
    case allocate
    case notAvailable
    case authFailed
    case duplicateItem
    case itemNotFound
    case interactionNotAllowed
    case decode
    case missingEntitlement
    public static var debugLevel: Swift.Int
    public init?(rawValue: Darwin.OSStatus)
    public typealias RawValue = Darwin.OSStatus
    public var rawValue: Darwin.OSStatus {
      get
    }
  }
  public static func upsertKey(_ pemKey: Swift.String, keyTag: Swift.String, options: [Foundation.NSString : Swift.AnyObject] = [:]) throws
  public static func getKey(_ keyTag: Swift.String) throws -> Swift.String
  public static func delKey(_ keyTag: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwKeyConvert {
  public enum SwError : Swift.Error {
    case invalidKey
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
    public static func == (a: GalaxyPaySDK.SwKeyConvert.SwError, b: GalaxyPaySDK.SwKeyConvert.SwError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public typealias EncMode = GalaxyPaySDK.PEM.EncryptedPrivateKey.EncMode
    public static func encryptPEM(_ pemKey: Swift.String, passphrase: Swift.String, mode: GalaxyPaySDK.SwKeyConvert.PrivateKey.EncMode) throws -> Swift.String
    public static func decryptPEM(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func pemToPKCS8DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public static func derToPKCS8PEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PKCS8 {
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func addHeader(_ derKey: Foundation.Data) -> Foundation.Data
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PEM {
  public enum SwError : Swift.Error {
    case parse(Swift.String)
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EncryptedPrivateKey {
    public enum EncMode {
      case aes128CBC, aes256CBC
      public static func == (a: GalaxyPaySDK.PEM.EncryptedPrivateKey.EncMode, b: GalaxyPaySDK.PEM.EncryptedPrivateKey.EncMode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static func toDER(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data, passphrase: Swift.String, mode: GalaxyPaySDK.PEM.EncryptedPrivateKey.EncMode) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CC {
  public typealias CCCryptorStatus = Swift.Int32
  public enum CCError : GalaxyPaySDK.CC.CCCryptorStatus, Swift.Error {
    case paramError
    case bufferTooSmall
    case memoryFailure
    case alignmentError
    case decodeError
    case unimplemented
    case overflow
    case rngFailure
    case unspecifiedError
    case callSequenceError
    case keySizeError
    case invalidKey
    public static var debugLevel: Swift.Int
    public init?(rawValue: GalaxyPaySDK.CC.CCCryptorStatus)
    public typealias RawValue = GalaxyPaySDK.CC.CCCryptorStatus
    public var rawValue: GalaxyPaySDK.CC.CCCryptorStatus {
      get
    }
  }
  public static func generateRandom(_ size: Swift.Int) -> Foundation.Data
  public typealias CCDigestAlgorithm = Swift.UInt32
  public enum DigestAlgorithm : GalaxyPaySDK.CC.CCDigestAlgorithm {
    case none
    case md5
    case rmd128, rmd160, rmd256, rmd320
    case sha1
    case sha224, sha256, sha384, sha512
    public init?(rawValue: GalaxyPaySDK.CC.CCDigestAlgorithm)
    public typealias RawValue = GalaxyPaySDK.CC.CCDigestAlgorithm
    public var rawValue: GalaxyPaySDK.CC.CCDigestAlgorithm {
      get
    }
  }
  public static func digest(_ data: Foundation.Data, alg: GalaxyPaySDK.CC.DigestAlgorithm) -> Foundation.Data
  public typealias CCHmacAlgorithm = Swift.UInt32
  public enum HMACAlg : GalaxyPaySDK.CC.CCHmacAlgorithm {
    case sha1, md5, sha256, sha384, sha512, sha224
    public init?(rawValue: GalaxyPaySDK.CC.CCHmacAlgorithm)
    public typealias RawValue = GalaxyPaySDK.CC.CCHmacAlgorithm
    public var rawValue: GalaxyPaySDK.CC.CCHmacAlgorithm {
      get
    }
  }
  public static func HMAC(_ data: Foundation.Data, alg: GalaxyPaySDK.CC.HMACAlg, key: Foundation.Data) -> Foundation.Data
  public typealias CCOperation = Swift.UInt32
  public enum OpMode : GalaxyPaySDK.CC.CCOperation {
    case encrypt, decrypt
    public init?(rawValue: GalaxyPaySDK.CC.CCOperation)
    public typealias RawValue = GalaxyPaySDK.CC.CCOperation
    public var rawValue: GalaxyPaySDK.CC.CCOperation {
      get
    }
  }
  public typealias CCMode = Swift.UInt32
  public enum BlockMode : GalaxyPaySDK.CC.CCMode {
    case ecb, cbc, cfb, ctr, f8, lrw, ofb, xts, rc4, cfb8
    public init?(rawValue: GalaxyPaySDK.CC.CCMode)
    public typealias RawValue = GalaxyPaySDK.CC.CCMode
    public var rawValue: GalaxyPaySDK.CC.CCMode {
      get
    }
  }
  public enum AuthBlockMode : GalaxyPaySDK.CC.CCMode {
    case gcm, ccm
    public init?(rawValue: GalaxyPaySDK.CC.CCMode)
    public typealias RawValue = GalaxyPaySDK.CC.CCMode
    public var rawValue: GalaxyPaySDK.CC.CCMode {
      get
    }
  }
  public typealias CCAlgorithm = Swift.UInt32
  public enum Algorithm : GalaxyPaySDK.CC.CCAlgorithm {
    case aes, des, threeDES, cast, rc4, rc2, blowfish
    public init?(rawValue: GalaxyPaySDK.CC.CCAlgorithm)
    public typealias RawValue = GalaxyPaySDK.CC.CCAlgorithm
    public var rawValue: GalaxyPaySDK.CC.CCAlgorithm {
      get
    }
  }
  public typealias CCPadding = Swift.UInt32
  public enum Padding : GalaxyPaySDK.CC.CCPadding {
    case noPadding, pkcs7Padding
    public init?(rawValue: GalaxyPaySDK.CC.CCPadding)
    public typealias RawValue = GalaxyPaySDK.CC.CCPadding
    public var rawValue: GalaxyPaySDK.CC.CCPadding {
      get
    }
  }
  public static func crypt(_ opMode: GalaxyPaySDK.CC.OpMode, blockMode: GalaxyPaySDK.CC.BlockMode, algorithm: GalaxyPaySDK.CC.Algorithm, padding: GalaxyPaySDK.CC.Padding, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data) throws -> Foundation.Data
  public static func cryptAuth(_ opMode: GalaxyPaySDK.CC.OpMode, blockMode: GalaxyPaySDK.CC.AuthBlockMode, algorithm: GalaxyPaySDK.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> Foundation.Data
  public static func digestAvailable() -> Swift.Bool
  public static func randomAvailable() -> Swift.Bool
  public static func hmacAvailable() -> Swift.Bool
  public static func cryptorAvailable() -> Swift.Bool
  public static func available() -> Swift.Bool
  @_hasMissingDesignatedInitializers open class GCM {
    public static func crypt(_ opMode: GalaxyPaySDK.CC.OpMode, algorithm: GalaxyPaySDK.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CCM {
    public static func crypt(_ opMode: GalaxyPaySDK.CC.OpMode, algorithm: GalaxyPaySDK.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class RSA {
    public typealias CCAsymmetricPadding = Swift.UInt32
    public enum AsymmetricPadding : GalaxyPaySDK.CC.RSA.CCAsymmetricPadding {
      case pkcs1
      case oaep
      public init?(rawValue: GalaxyPaySDK.CC.RSA.CCAsymmetricPadding)
      public typealias RawValue = GalaxyPaySDK.CC.RSA.CCAsymmetricPadding
      public var rawValue: GalaxyPaySDK.CC.RSA.CCAsymmetricPadding {
        get
      }
    }
    public enum AsymmetricSAPadding : Swift.UInt32 {
      case pkcs15
      case pss
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func generateKeyPair(_ keySize: Swift.Int = 4096) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ derKey: Foundation.Data) throws -> Foundation.Data
    public static func encrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: GalaxyPaySDK.CC.RSA.AsymmetricPadding, digest: GalaxyPaySDK.CC.DigestAlgorithm) throws -> Foundation.Data
    public static func decrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: GalaxyPaySDK.CC.RSA.AsymmetricPadding, digest: GalaxyPaySDK.CC.DigestAlgorithm) throws -> (Foundation.Data, Swift.Int)
    public static func sign(_ message: Foundation.Data, derKey: Foundation.Data, padding: GalaxyPaySDK.CC.RSA.AsymmetricSAPadding, digest: GalaxyPaySDK.CC.DigestAlgorithm, saltLen: Swift.Int) throws -> Foundation.Data
    public static func verify(_ message: Foundation.Data, derKey: Foundation.Data, padding: GalaxyPaySDK.CC.RSA.AsymmetricSAPadding, digest: GalaxyPaySDK.CC.DigestAlgorithm, saltLen: Swift.Int, signedData: Foundation.Data) throws -> Swift.Bool
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class DH {
    public enum DHParam {
      case rfc3526Group5
      case rfc2409Group2
      public static func == (a: GalaxyPaySDK.CC.DH.DHParam, b: GalaxyPaySDK.CC.DH.DHParam) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    open class DH {
      public init(dhParam: GalaxyPaySDK.CC.DH.DHParam) throws
      open func generateKey() throws -> Foundation.Data
      open func computeKey(_ peerKey: Foundation.Data) throws -> Foundation.Data
      @objc deinit
    }
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EC {
    public static func generateKeyPair(_ keySize: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ privateKey: Foundation.Data) throws -> Foundation.Data
    public static func signHash(_ privateKey: Foundation.Data, hash: Foundation.Data) throws -> Foundation.Data
    public static func verifyHash(_ publicKey: Foundation.Data, hash: Foundation.Data, signedData: Foundation.Data) throws -> Swift.Bool
    public static func computeSharedSecret(_ privateKey: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
    public struct KeyComponents {
      public init(_ keySize: Swift.Int, _ x: Foundation.Data, _ y: Foundation.Data, _ d: Foundation.Data)
      public var keySize: Swift.Int
      public var x: Foundation.Data
      public var y: Foundation.Data
      public var d: Foundation.Data
    }
    public static func getPublicKeyComponents(_ keyData: Foundation.Data) throws -> GalaxyPaySDK.CC.EC.KeyComponents
    public static func getPrivateKeyComponents(_ keyData: Foundation.Data) throws -> GalaxyPaySDK.CC.EC.KeyComponents
    public static func createFromData(_ keySize: Darwin.size_t, _ x: Foundation.Data, _ y: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CRC {
    public typealias CNcrc = Swift.UInt32
    public enum Mode : GalaxyPaySDK.CC.CRC.CNcrc {
      case crc8, crc8ICODE, crc8ITU, crc8ROHC, crc8WCDMA, crc16, crc16CCITTTrue, crc16CCITTFalse, crc16USB, crc16XMODEM, crc16DECTR, crc16DECTX, crc16ICODE, crc16VERIFONE, crc16A, crc16B, crc16Fletcher, crc32Adler, crc32, crc32CASTAGNOLI, crc32BZIP2, crc32MPEG2, crc32POSIX, crc32XFER, crc64ECMA182
      public init?(rawValue: GalaxyPaySDK.CC.CRC.CNcrc)
      public typealias RawValue = GalaxyPaySDK.CC.CRC.CNcrc
      public var rawValue: GalaxyPaySDK.CC.CRC.CNcrc {
        get
      }
    }
    public static func crc(_ input: Foundation.Data, mode: GalaxyPaySDK.CC.CRC.Mode) throws -> Swift.UInt64
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CMAC {
    public static func AESCMAC(_ data: Foundation.Data, key: Foundation.Data) -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyDerivation {
    public typealias CCPseudoRandomAlgorithm = Swift.UInt32
    public enum PRFAlg : GalaxyPaySDK.CC.KeyDerivation.CCPseudoRandomAlgorithm {
      case sha1, sha224, sha256, sha384, sha512
      public init?(rawValue: GalaxyPaySDK.CC.KeyDerivation.CCPseudoRandomAlgorithm)
      public typealias RawValue = GalaxyPaySDK.CC.KeyDerivation.CCPseudoRandomAlgorithm
      public var rawValue: GalaxyPaySDK.CC.KeyDerivation.CCPseudoRandomAlgorithm {
        get
      }
    }
    public static func PBKDF2(_ password: Swift.String, salt: Foundation.Data, prf: GalaxyPaySDK.CC.KeyDerivation.PRFAlg, rounds: Swift.UInt32) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyWrap {
    public static let rfc3394IV: Foundation.Data
    public static func SymmetricKeyWrap(_ iv: Foundation.Data, kek: Foundation.Data, rawKey: Foundation.Data) throws -> Foundation.Data
    public static func SymmetricKeyUnwrap(_ iv: Foundation.Data, kek: Foundation.Data, wrappedKey: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
extension Foundation.Data {
  public func hexadecimalString() -> Swift.String
  public func arrayOfBytes() -> [Swift.UInt8]
}
extension Swift.String {
  public func dataFromHexadecimalString() -> Foundation.Data?
}
extension GalaxyPaySDK.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension GalaxyPaySDK.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> GalaxyPaySDK.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension GalaxyPaySDK.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> GalaxyPaySDK.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension GalaxyPaySDK.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> GalaxyPaySDK.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension Foundation.URLSessionConfiguration : GalaxyPaySDK.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension GalaxyPaySDK.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension GalaxyPaySDK.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension GalaxyPaySDK.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension GalaxyPaySDK.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension GalaxyPaySDK.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
public typealias Padding = Security.SecPadding
public enum SwiftyRSA {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> (privateKey: GalaxyPaySDK.PrivateKey, publicKey: GalaxyPaySDK.PublicKey)
}
@_inheritsConvenienceInitializers @objc(NotificationItem) public class NotificationItem : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension GalaxyPaySDK.NotificationItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GalaxyPaySDK.NotificationItem>
  @objc @NSManaged dynamic public var action: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var actionDirect: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var actionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var body: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var code: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var extra_data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var icon: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var image: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isRead: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isStorage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tenantId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var time: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQAutoToolbarManageBehaviour : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQAutoToolbarManageBehaviour : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQAutoToolbarManageBehaviour : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQPreviousNextDisplayMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQPreviousNextDisplayMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQPreviousNextDisplayMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQEnableMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQEnableMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension GalaxyPaySDK.IQEnableMode : Swift.RawRepresentable {}
extension GalaxyPaySDK.Signature.DigestType : Swift.Equatable {}
extension GalaxyPaySDK.Signature.DigestType : Swift.Hashable {}
extension GalaxyPaySDK.ImageDownloader.DownloadPrioritization : Swift.Equatable {}
extension GalaxyPaySDK.ImageDownloader.DownloadPrioritization : Swift.Hashable {}
extension GalaxyPaySDK.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension GalaxyPaySDK.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension GalaxyPaySDK.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension GalaxyPaySDK.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension GalaxyPaySDK.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension GalaxyPaySDK.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension GalaxyPaySDK.AuthenticationUI : Swift.Equatable {}
extension GalaxyPaySDK.AuthenticationUI : Swift.Hashable {}
extension GalaxyPaySDK.Request.State : Swift.Equatable {}
extension GalaxyPaySDK.Request.State : Swift.Hashable {}
extension GalaxyPaySDK.AuthenticationError : Swift.Equatable {}
extension GalaxyPaySDK.AuthenticationError : Swift.Hashable {}
extension GalaxyPaySDK._objc_Signature.DigestType : Swift.Equatable {}
extension GalaxyPaySDK._objc_Signature.DigestType : Swift.Hashable {}
extension GalaxyPaySDK._objc_Signature.DigestType : Swift.RawRepresentable {}
extension GalaxyPaySDK.URLEncoding.Destination : Swift.Equatable {}
extension GalaxyPaySDK.URLEncoding.Destination : Swift.Hashable {}
extension GalaxyPaySDK.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension GalaxyPaySDK.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension GalaxyPaySDK.URLEncoding.BoolEncoding : Swift.Equatable {}
extension GalaxyPaySDK.URLEncoding.BoolEncoding : Swift.Hashable {}
extension GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension GalaxyPaySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension GalaxyPaySDK.BoxLayout.Axis : Swift.Equatable {}
extension GalaxyPaySDK.BoxLayout.Axis : Swift.Hashable {}
extension GalaxyPaySDK.BoxEdge : Swift.Equatable {}
extension GalaxyPaySDK.BoxEdge : Swift.Hashable {}
extension GalaxyPaySDK.BoxEdge.Position : Swift.Equatable {}
extension GalaxyPaySDK.BoxEdge.Position : Swift.Hashable {}
extension GalaxyPaySDK.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension GalaxyPaySDK.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
extension GalaxyPaySDK.SwKeyStore.SecError : Swift.Equatable {}
extension GalaxyPaySDK.SwKeyStore.SecError : Swift.Hashable {}
extension GalaxyPaySDK.SwKeyStore.SecError : Swift.RawRepresentable {}
extension GalaxyPaySDK.SwKeyConvert.SwError : Swift.Equatable {}
extension GalaxyPaySDK.SwKeyConvert.SwError : Swift.Hashable {}
extension GalaxyPaySDK.PEM.EncryptedPrivateKey.EncMode : Swift.Equatable {}
extension GalaxyPaySDK.PEM.EncryptedPrivateKey.EncMode : Swift.Hashable {}
extension GalaxyPaySDK.CC.CCError : Swift.Equatable {}
extension GalaxyPaySDK.CC.CCError : Swift.Hashable {}
extension GalaxyPaySDK.CC.CCError : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.DigestAlgorithm : Swift.Equatable {}
extension GalaxyPaySDK.CC.DigestAlgorithm : Swift.Hashable {}
extension GalaxyPaySDK.CC.DigestAlgorithm : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.HMACAlg : Swift.Equatable {}
extension GalaxyPaySDK.CC.HMACAlg : Swift.Hashable {}
extension GalaxyPaySDK.CC.HMACAlg : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.OpMode : Swift.Equatable {}
extension GalaxyPaySDK.CC.OpMode : Swift.Hashable {}
extension GalaxyPaySDK.CC.OpMode : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.BlockMode : Swift.Equatable {}
extension GalaxyPaySDK.CC.BlockMode : Swift.Hashable {}
extension GalaxyPaySDK.CC.BlockMode : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.AuthBlockMode : Swift.Equatable {}
extension GalaxyPaySDK.CC.AuthBlockMode : Swift.Hashable {}
extension GalaxyPaySDK.CC.AuthBlockMode : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.Algorithm : Swift.Equatable {}
extension GalaxyPaySDK.CC.Algorithm : Swift.Hashable {}
extension GalaxyPaySDK.CC.Algorithm : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.Padding : Swift.Equatable {}
extension GalaxyPaySDK.CC.Padding : Swift.Hashable {}
extension GalaxyPaySDK.CC.Padding : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.RSA.AsymmetricPadding : Swift.Equatable {}
extension GalaxyPaySDK.CC.RSA.AsymmetricPadding : Swift.Hashable {}
extension GalaxyPaySDK.CC.RSA.AsymmetricPadding : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.RSA.AsymmetricSAPadding : Swift.Equatable {}
extension GalaxyPaySDK.CC.RSA.AsymmetricSAPadding : Swift.Hashable {}
extension GalaxyPaySDK.CC.RSA.AsymmetricSAPadding : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.DH.DHParam : Swift.Equatable {}
extension GalaxyPaySDK.CC.DH.DHParam : Swift.Hashable {}
extension GalaxyPaySDK.CC.CRC.Mode : Swift.Equatable {}
extension GalaxyPaySDK.CC.CRC.Mode : Swift.Hashable {}
extension GalaxyPaySDK.CC.CRC.Mode : Swift.RawRepresentable {}
extension GalaxyPaySDK.CC.KeyDerivation.PRFAlg : Swift.Equatable {}
extension GalaxyPaySDK.CC.KeyDerivation.PRFAlg : Swift.Hashable {}
extension GalaxyPaySDK.CC.KeyDerivation.PRFAlg : Swift.RawRepresentable {}
